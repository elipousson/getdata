[{"path":"https://elipousson.github.io/getdata/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to getdata","title":"Contributing to getdata","text":"outlines propose change getdata (using contribution guidelines tidyverse packages). See tidyverse development contributing guide additional information.","code":""},{"path":"https://elipousson.github.io/getdata/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to getdata","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://elipousson.github.io/getdata/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to getdata","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://elipousson.github.io/getdata/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to getdata","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"elipousson/getdata\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://elipousson.github.io/getdata/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to getdata","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://elipousson.github.io/getdata/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to getdata","text":"Please note getdata project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://elipousson.github.io/getdata/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 getdata authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://elipousson.github.io/getdata/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eli Pousson. Author, maintainer, copyright holder.","code":""},{"path":"https://elipousson.github.io/getdata/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pousson E (2023). getdata: Get Easy Access Tabular Spatial Data. https://github.com/elipousson/getdata, https://elipousson.github.io/getdata/.","code":"@Manual{,   title = {getdata: Get Easy Access to Tabular and Spatial Data},   author = {Eli Pousson},   year = {2023},   note = {https://github.com/elipousson/getdata, https://elipousson.github.io/getdata/}, }"},{"path":"https://elipousson.github.io/getdata/index.html","id":"getdata-","dir":"","previous_headings":"","what":"Get Easy Access to Tabular and Spatial Data","title":"Get Easy Access to Tabular and Spatial Data","text":"goal {getdata} make experience getting location data easier consistent across wide variety sources. {getdata} started part {overedge} package along {maplayer} {sfext}. {getdata} designed work well location-specific data packages {mapmaryland} {mapbaltimore} support reproducible approaches map-making place-based data analysis. Using data access functions {sfext} additional API wrapper functions, package supports data access sources including: ArcGIS FeatureServer MapServer layers (using {esri2sf}) U.S. Census Bureau data (using {tigris}) OpenStreetMap (using {osmdata}) Socrata Open Data resources (using {RSocrata}) Google Sheets (using {googlesheets4}) Flickr photos (using {FlickrAPI}) Static map images Mapbox (using {mapboxapi}) Airtable bases (using {httr2} Airtable API) Wikipedia articles (using {httr2} Wikipedia Geosearch API) spatial data sources including Google MyMaps, GitHub gists, data source already supported sf::read_sf() (see sfext::read_sf_ext() details) advantage using {getdata} provides consistent interface using location create bounding box spatial filtering. Many functions also support querying spatial data name id. possible, spatial filter used importing downloading data avoid need load large data files need small area. package also provides consistent approach handling API tokens keys caching data locally (see set_access_token() sfext::get_data_dir() details). related {sfext} package allows {getdata} supports easy conversion tabular data spatial data. example, source data coordinates, can convert data sf object. data address column, can geocode data using {tidygeocoder} package. data location name column, “neighborhood”, can join data simple feature object related geometry. also can turn options setting geometry = FALSE data access functions. Lastly, format_data() format_sf_data() functions provide convenient options working data downloaded. advanced R users may prefer create custom formatting scripts, functions designed support creation custom data formatting access functions format_md_crash_data() get_md_crash_data(). Fair warning: package optimized speed plans submit CRAN. package imports {rlang} non-standard evaluation error handling relies {dplyr}, {purrr}, tidyverse packages. Suggestions additional data sources support, new functions, improvements existing functions welcome.","code":""},{"path":"https://elipousson.github.io/getdata/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Get Easy Access to Tabular and Spatial Data","text":"can install development version getdata like :","code":"pak::pkg_install(\"elipousson/getdata\")"},{"path":"https://elipousson.github.io/getdata/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic usage","title":"Get Easy Access to Tabular and Spatial Data","text":"get_location_data() flexible function reading subsetting data. example, data file path can also URL, name data set another package, sf object. can use get_location() get specific location larger simple feature collection includes specific type locations, counties North Carolina. basic approach filtering name id: can access data within around specific location. example, get_location_data() can return counties within quarter-mile Warren County. approach using names attribute query locations buffers spatial filter works functions package. can access data OpenStreetMap: can also access data public ArcGIS MapServer FeatureServer layers: cases, API key may required functions work: must set provide API token key get_open_data(), get_airtable_data(), get_flickr_photos() work. get_ghseet_data() require user authentication (handled automatically {googlesheets4} package).","code":"library(getdata) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  # location is optional nc <- get_location_data(data = system.file(\"shape/nc.shp\", package = \"sf\")) # get_location works with a type sf object and name and id values location <- get_location(type = nc, name = \"Warren\", name_col = \"NAME\") nearby_counties <-   get_location_data(     data = nc,     location = location,     dist = 0.25,     unit = \"mi\",     crop = FALSE   )  glimpse(nearby_counties) #> Rows: 6 #> Columns: 15 #> $ AREA      <dbl> 0.153, 0.118, 0.072, 0.190, 0.128, 0.142 #> $ PERIMETER <dbl> 2.206, 1.421, 1.085, 2.204, 1.554, 1.640 #> $ CNTY_     <dbl> 1832, 1836, 1842, 1846, 1897, 1913 #> $ CNTY_ID   <dbl> 1832, 1836, 1842, 1846, 1897, 1913 #> $ NAME      <chr> \"Northampton\", \"Warren\", \"Vance\", \"Halifax\", \"Franklin\", \"Na… #> $ FIPS      <chr> \"37131\", \"37185\", \"37181\", \"37083\", \"37069\", \"37127\" #> $ FIPSNO    <dbl> 37131, 37185, 37181, 37083, 37069, 37127 #> $ CRESS_ID  <int> 66, 93, 91, 42, 35, 64 #> $ BIR74     <dbl> 1421, 968, 2180, 3608, 1399, 4021 #> $ SID74     <dbl> 9, 4, 4, 18, 2, 8 #> $ NWBIR74   <dbl> 1066, 748, 1179, 2365, 736, 1851 #> $ BIR79     <dbl> 1606, 1190, 2753, 4463, 1863, 5189 #> $ SID79     <dbl> 3, 2, 6, 17, 0, 7 #> $ NWBIR79   <dbl> 1197, 844, 1492, 2980, 950, 2274 #> $ geometry  <MULTIPOLYGON [°]> MULTIPOLYGON (((-77.21767 3..., MULTIPOLYGON (((-78.30876 3.… county_parks <-   get_osm_data(     location = nearby_counties[1, ],     asp = 1,     key = \"leisure\",     value = \"park\",     geometry = \"polygons\"   ) #> ℹ OpenStreetMap data is licensed under the Open Database License (ODbL). #>   Attribution is required if you use this data. #> • Learn more about the ODbL and OSM attribution requirements at #>   <]8;;https://www.openstreetmap.org/copyrighthttps://www.openstreetmap.org/copyright]8;;> #> This message is displayed once every 8 hours.  glimpse(county_parks) #> Rows: 41 #> Columns: 26 #> $ osm_id                    <chr> \"33006375\", \"33006525\", \"33006552\", \"3300661… #> $ name                      <chr> \"Dwight Hall Recreation Park\", \"Rochelle Par… #> $ `NHD:FCode`               <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ `NHD:FDate`               <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ `NHD:FTYPE`               <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ access                    <chr> \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"y… #> $ `addr:city`               <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ `addr:housenumber`        <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ `addr:postcode`           <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ `addr:state`              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ `addr:street`             <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ area                      <chr> NA, NA, \"yes\", NA, NA, NA, NA, NA, NA, \"yes\"… #> $ ele                       <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ `gnis:county_id`          <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ `gnis:created`            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ `gnis:feature_id`         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ `gnis:state_id`           <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ leisure                   <chr> \"park\", \"park\", \"park\", \"park\", \"park\", \"par… #> $ `name:etymology:wikidata` <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ `nconemap:OWNER`          <chr> \"GASTON\", \"ROANOKE RAPIDS\", \"ROANOKE RAPIDS\"… #> $ opening_hours             <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ operator                  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ ownership                 <chr> \"municipal\", \"municipal\", \"municipal\", \"muni… #> $ phone                     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … #> $ source                    <chr> \"NCOnemap\", \"NCOnemap\", \"NCOnemap\", \"NCOnema… #> $ geometry                  <POLYGON [°]> POLYGON ((-77.64057 36.4935..., POLY… nps_park_url <- \"https://carto.nationalmap.gov/arcgis/rest/services/govunits/MapServer/29\"  nps_park <-   get_esri_data(     url = nps_park_url,     name = \"Cape Lookout National Seashore\",     name_col = \"NAME\",     quiet = TRUE   )  glimpse(nps_park) #> Rows: 1 #> Columns: 20 #> $ objectid              <int> 6706 #> $ permanent_identifier  <chr> \"d9eec3c0-ae13-4ef9-a17b-dc4858cd39d4\" #> $ source_featureid      <chr> \"CALO\" #> $ source_datasetid      <chr> \"{562524A1-7D6A-40EA-AA44-2E9AEF4488EB}\" #> $ source_datadesc       <chr> \"National Park Boundaries 3/2020\" #> $ source_originator     <chr> \"National Park Service\" #> $ data_security         <int> 5 #> $ distribution_policy   <chr> \"E4\" #> $ loaddate              <dbl> 1.586355e+12 #> $ gnis_id               <chr> \"1000889\" #> $ name                  <chr> \"Cape Lookout National Seashore\" #> $ areasqkm              <dbl> 115.005 #> $ ftype                 <int> 674 #> $ fcode                 <int> 67400 #> $ admintype             <int> 1 #> $ ownerormanagingagency <int> 13 #> $ shape_length          <dbl> 233295.3 #> $ shape_area            <dbl> 171056451 #> $ gnis_name             <chr> \"Cape Lookout National Seashore\" #> $ geoms                 <MULTIPOLYGON [m]> MULTIPOLYGON (((-8468201 41... ## Get Q2 2020 vehicle crash data for Cecil County, Maryland get_open_data(   source_url = \"https://opendata.maryland.gov\",   data = \"65du-s3qu\",   where = \"(year = '2020') AND (quarter = 'Q2')\",   name_col = \"county_desc\",   name = \"Cecil\",   token = Sys.getenv(\"MARYLAND_OPEN_DATA_API_KEY\") )"},{"path":"https://elipousson.github.io/getdata/index.html","id":"helper-and-utility-functions","dir":"","previous_headings":"","what":"Helper and utility functions","title":"Get Easy Access to Tabular and Spatial Data","text":"package also includes handful helper wrapper functions designed can used formatting, labelling, tasks. example, can use fix_epoch_date() convert columns UNIX time numeric values POSIXct values: can use make_variable_dictionary() make custom dictionary: can use rename_with_xwalk() rename columns:","code":"nps_park[[\"loaddate\"]] #> [1] 1.586355e+12  nps_park <- fix_epoch_date(nps_park)  nps_park[[\"loaddate\"]] #> [1] \"2020-04-08 10:03:28 EDT\" make_variable_dictionary(   nps_park[, c(10:12)],   .labels = c(     \"Geographic Names Information System identifier\",     \"Park name\",     \"Area (sq km)\",     \"Geometry\"   ) ) #>  pos variable label                                          col_type values #>  1   gnis_id  Geographic Names Information System identifier chr             #>  2   name     Park name                                      chr             #>  3   areasqkm Area (sq km)                                   dbl             #>  4   geoms    Geometry                                       s_MULTIP rename_with_xwalk(   nps_park[, c(10:12)],   xwalk = list(     \"gnis\" = \"gnis_id\",     \"sq_km\" = \"areasqkm\"   ) ) #> Simple feature collection with 1 feature and 3 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -8534392 ymin: 4107119 xmax: -8463797 ymax: 4173979 #> Projected CRS: WGS 84 / Pseudo-Mercator #>      gnis                           name   sq_km                          geoms #> 1 1000889 Cape Lookout National Seashore 115.005 MULTIPOLYGON (((-8468201 41..."},{"path":"https://elipousson.github.io/getdata/reference/as_date_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Use lubridate to convert an object to a date range — as_date_range","title":"Use lubridate to convert an object to a date range — as_date_range","text":"Use lubridate::as_date() convert object length 2 list minimum maximum date. default dates list named named \"start\" \"end\". date_range_query() variation returns query string can passed \"\" parameter get_esri_data(). between_date_range() works way identical uses DATE syntax.","code":""},{"path":"https://elipousson.github.io/getdata/reference/as_date_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use lubridate to convert an object to a date range — as_date_range","text":"","code":"as_date_range(   x = NULL,   year = NULL,   days = 90,   ...,   start_date = NULL,   end_date = NULL,   nm = c(\"start\", \"end\") )  date_range_query(x = NULL, .col = \"date\", ..., nm = c(\"start\", \"end\"))  between_date_range(x = NULL, .col = \"date\", ..., nm = c(\"start\", \"end\"))"},{"path":"https://elipousson.github.io/getdata/reference/as_date_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use lubridate to convert an object to a date range — as_date_range","text":"x Date range character vector format c(\"<start date>\", \"<end date>\"). length 1 days NULL, return range based c(date_range, date_range + lubridate::days(days)) year date_range NULL year provided, date range set c(\"<year>-01-01\", \"<year>-12-31\"). year ignored date_range provided. days Default range duration days use date_range length 1. ... Arguments passed lubridate::as_date   start_date, end_date Start end date used year date_range NULL. nm Names use returned date range list. Defaults c(\"start\", \"end\"). .col Name date column use query. Defaults \"date\".","code":""},{"path":"https://elipousson.github.io/getdata/reference/as_date_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use lubridate to convert an object to a date range — as_date_range","text":"length 2 list min max Date values.","code":""},{"path":"https://elipousson.github.io/getdata/reference/as_date_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use lubridate to convert an object to a date range — as_date_range","text":"","code":"as_date_range(\"2022-01-01\", days = 10) #> $start #> [1] \"2022-01-01\" #>  #> $end #> [1] \"2022-01-11\" #>   as_date_range(c(\"2022-01-01\", \"2022-01-31\")) #> $start #> [1] \"2022-01-01\" #>  #> $end #> [1] \"2022-01-31\" #>   as_date_range(year = 2022) #> $start #> [1] \"2022-01-01\" #>  #> $end #> [1] \"2022-12-31\" #>   date_range_query(c(\"2022-01-01\", \"2022-01-31\")) #> (date >= '2022-01-01') AND (date <= '2022-01-31')"},{"path":"https://elipousson.github.io/getdata/reference/format_address_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Format data frames and simple features with address data — format_address_data","title":"Format data frames and simple features with address data — format_address_data","text":"getdata two helpers working address data: bind_address_col() bind provided value city, county, state data frame (supplement address data consistent values variables). function useful converting partial street addresses consistent values state, county, city full addresses bind_block_col() requires data frame columns named \"bldg_num\", \"street_dir_prefix\", \"street_name\", \"street_type\" binds derived values whether building even odd side block create block segment block face (including even/odd identifier).","code":""},{"path":"https://elipousson.github.io/getdata/reference/format_address_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format data frames and simple features with address data — format_address_data","text":"","code":"bind_block_col(   x,   bldg_num = \"bldg_num\",   street_dir_prefix = \"street_dir_prefix\",   street_name = \"street_name\",   street_suffix = \"street_type\",   replace_suffix = FALSE,   street_col = NULL,   block_col = NULL,   .after = street_suffix,   case = NULL )  bind_address_col(x, ..., case = NULL, .cols = NULL, .after = NULL)  bind_location_text_col(   x,   text_col = \"text\",   address_pattern = c(\"Ave.\", \"Avenue\", \"St.\", \"Street\", \"Rd.\", \"Road\"),   block_face_pattern = c(\"sides\\\\)\", \"side\\\\)\", \"[:space:]block\", \"-block\", \"blocks\"),   street_corridor_pattern = c(\"between(?=.+and)\", \"from(?=.+to)\"),   .cols = NULL )"},{"path":"https://elipousson.github.io/getdata/reference/format_address_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format data frames and simple features with address data — format_address_data","text":"x data.frame column name matching col column names matching list passed .cols (default values listed ). bldg_num, street_dir_prefix, street_name, street_suffix Column names use address information required generate block name number. replace_suffix TRUE, replace values street_suffix column abbreviations street_suffixes. street_col String use street address column added based component column values. block_col String use prefix block identifier columns separator block number street. Set \"block\" NULL (default). length 2 (e.g. c(\"blk\", \"block\")), second value used block separator first column identifier prefix. .passed dplyr::mutate() defaults street_suffix bind_block_col() \"address\" bind_address_col(). case Case use text new columns modified values. Options include \"lower\", \"upper\", \"title\", \"sentence\". Defaults NULL leaves case . ... Additional parameters passed dplyr::mutate() intended use filling missing values, e.g. state = \"MD\" add missing state column. .cols Column names add. Defaults is_address, is_block_face, is_street_corridor, block_side. x must column names matching names found .cols. text_col Column name containing information check location details, Default: 'text' address_pattern character vector regex patterns return TRUE is_address. block_face_pattern character vector regex patterns return TRUE is_block_face. street_corridor_pattern character vector regex patterns return TRUE is_street_corridor.","code":""},{"path":"https://elipousson.github.io/getdata/reference/format_address_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format data frames and simple features with address data — format_address_data","text":"data.frame new indicator columns address block_face column indicating whether text references particular cardinal direction describing block.","code":""},{"path":"https://elipousson.github.io/getdata/reference/format_address_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format data frames and simple features with address data — format_address_data","text":"","code":"address_df <-   data.frame(     \"bldg_num\" = c(\"100\", \"1415\", \"600\"),     \"street_dir_prefix\" = c(NA, NA, \"N\"),     \"street_name\" = c(\"Holiday\", \"Key\", \"Charles\"),     \"street_type\" = c(\"Street\", \"Highway\", \"St\")   )  address_df <-   bind_block_col(     x = address_df,     street_col = \"street_address\"   )  address_df[1,] #>   bldg_num street_dir_prefix street_name street_type     street_address #> 1      100                       Holiday      Street 100 Holiday Street #>   block_num block_even_odd            block_segment #> 1       100           Even 100 block Holiday Street #>                        block_face #> 1 100 block Holiday Street (Even)  address_df <-   bind_address_col(     address_df,     city = \"Baltimore\",     state = \"MD\"   )  address_df[2,] #>   bldg_num street_dir_prefix street_name street_type   street_address block_num #> 2     1415                           Key     Highway 1415 Key Highway      1400 #>   block_even_odd          block_segment                   block_face      city #> 2            Odd 1400 block Key Highway 1400 block Key Highway (Odd) Baltimore #>   state                        address #> 2    MD 1415 Key Highway, Baltimore MD  location_df <-   data.frame(     \"text\" = c(       \"100 Holiday St.\",       \"1400 block Key Highway (north side)\",       \"Charles St. from E. Centre St. to E. Madison St.\"     ) )  location_df <- bind_location_text_col(location_df)  location_df #>                                               text is_address is_block_face #> 1                                  100 Holiday St.       TRUE         FALSE #> 2              1400 block Key Highway (north side)       TRUE          TRUE #> 3 Charles St. from E. Centre St. to E. Madison St.       TRUE         FALSE #>   is_street_corridor block_side #> 1              FALSE       <NA> #> 2              FALSE      north #> 3               TRUE       <NA>"},{"path":"https://elipousson.github.io/getdata/reference/format_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Format data frames and simple features using common approaches — format_data","title":"Format data frames and simple features using common approaches — format_data","text":"function can apply following common data cleaning tasks: Applies stringr::str_squish stringr::str_trim character columns Optionally replaces character values \"\" NA values Optionally corrects UNIX formatted dates 1970-01-01 origins Optionally renames variables passing named list variables address functions previously included format_data() now documented format_address_data().","code":""},{"path":"https://elipousson.github.io/getdata/reference/format_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format data frames and simple features using common approaches — format_data","text":"","code":"format_data(   x,   var_names = NULL,   xwalk = NULL,   clean_names = TRUE,   .name_repair = \"check_unique\",   replace_na_with = NULL,   replace_with_na = NULL,   replace_empty_char_with_na = FALSE,   fix_date = FALSE,   label = FALSE,   remove_empty = NULL,   remove_constant = FALSE,   format_sf = FALSE,   ... )  rename_with_xwalk(   x,   xwalk = NULL,   label = FALSE,   .strict = TRUE,   keep_all = TRUE,   arg = caller_arg(x),   call = caller_env() )  label_with_xwalk(x, xwalk = NULL, label = \"var\", ...)  make_variable_dictionary(   x,   .labels = NULL,   .definitions = NULL,   details = c(\"basic\", \"none\", \"full\") )  fix_epoch_date(x, .cols = dplyr::contains(\"date\"), tz = \"\")"},{"path":"https://elipousson.github.io/getdata/reference/format_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format data frames and simple features using common approaches — format_data","text":"x tibble data frame object var_names named list following format, list(\"New var name\" = old_var_name), two column data frame first column new variable names second column old variable names; defaults NULL. xwalk data frame two columns using first column name second column value; named list. existing names x must values new names must names. clean_names TRUE, set .name_repair janitor::make_clean_names(); defaults TRUE. .name_repair Defaults \"check_unique\" replace_na_with named list pass tidyr::replace_na(); defaults NULL. replace_with_na named list pass naniar::replace_with_na(); defaults NULL. replace_empty_char_with_na TRUE, replace \"\" NA using naniar::replace_with_na_if(), Default: TRUE fix_date FALSE, fix UNIX epoch dates (common issue dates FeatureServer MapServer sources) using fix_epoch_date() function, Default: TRUE label label_with_xwalk() use label = \"val\" use labelled::set_value_labels() \"var\" (default) use labelled::set_variable_labels(). rename_with_xwalk(), label TRUE, xwalk passed label_with_xwalk() label = \"var\" label columns using original names. Defaults FALSE. remove_empty NULL, pass values (\"rows\", \"cols\" c(\"rows\", \"cols\") (default)) parameter janitor::remove_empty() remove_constant TRUE, pass data janitor::remove_constant() using default parameters. format_sf TRUE, pass x additional parameters format_sf_data(). ... Additional parameters passed format_sf_data() .strict TRUE (default), require values xwalk found column names x data.frame. FALSE, unmatched values xwalk ignored. keep_all FALSE, columns named xwalk dropped. TRUE (default), columns retained. x sf object, geometry column dropped even renamed. arg, call Additional parameters used internally cli::cli_abort() improve error messages. .labels Replaces labels column created labelled::generate_dictionary() column NA (existing labels assigned); defaults NULL. .definitions Character vector definitions appended dictionary data frame. Must order variables provided data frame x. details add details variable (full details time consuming big data frames, FALSE equivalent \"none\" TRUE \"full\") .cols tidyselect columns apply epoch date fixing function . Defaults dplyr::contains(\"date\"). tz Time zone passed .POSIXct().","code":""},{"path":"https://elipousson.github.io/getdata/reference/format_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format data frames and simple features using common approaches — format_data","text":"input data frame simple feature object formatting functions applied.","code":""},{"path":"https://elipousson.github.io/getdata/reference/format_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format data frames and simple features using common approaches — format_data","text":"","code":"nc <- get_location_data(data = system.file(\"shape/nc.shp\", package = \"sf\"))  format_data(nc) #> Simple feature collection with 100 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 #> Geodetic CRS:  NAD27 #> # A tibble: 100 × 15 #>     area perimeter  cnty cnty_id name  fips  fipsno cress_id bir74 sid74 nwbir74 #>  * <dbl>     <dbl> <dbl>   <dbl> <chr> <chr>  <dbl>    <int> <dbl> <dbl>   <dbl> #>  1 0.114      1.44  1825    1825 Ashe  37009  37009        5  1091     1      10 #>  2 0.061      1.23  1827    1827 Alle… 37005  37005        3   487     0      10 #>  3 0.143      1.63  1828    1828 Surry 37171  37171       86  3188     5     208 #>  4 0.07       2.97  1831    1831 Curr… 37053  37053       27   508     1     123 #>  5 0.153      2.21  1832    1832 Nort… 37131  37131       66  1421     9    1066 #>  6 0.097      1.67  1833    1833 Hert… 37091  37091       46  1452     7     954 #>  7 0.062      1.55  1834    1834 Camd… 37029  37029       15   286     0     115 #>  8 0.091      1.28  1835    1835 Gates 37073  37073       37   420     0     254 #>  9 0.118      1.42  1836    1836 Warr… 37185  37185       93   968     4     748 #> 10 0.124      1.43  1837    1837 Stok… 37169  37169       85  1612     1     160 #> # ℹ 90 more rows #> # ℹ 4 more variables: bir79 <dbl>, sid79 <dbl>, nwbir79 <dbl>, #> #   geometry <MULTIPOLYGON [°]>"},{"path":"https://elipousson.github.io/getdata/reference/format_sf_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Format simple feature data — format_sf_data","title":"Format simple feature data — format_sf_data","text":"main format_sf_data function wrapper following common steps transforming sf object preparing mapping analysis:","code":""},{"path":"https://elipousson.github.io/getdata/reference/format_sf_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format simple feature data — format_sf_data","text":"","code":"format_sf_data(   x,   crs = getOption(\"getdata.crs\", default = 3857),   erase_data = NULL,   dTolerance = NULL,   smooth = FALSE,   sf_col = NULL,   sf_req = TRUE,   ... )  erase_data(x, erase_data = NULL)"},{"path":"https://elipousson.github.io/getdata/reference/format_sf_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format simple feature data — format_sf_data","text":"x sf object , sf_req FALSE, object can converted sf object sfext::as_sf. crs Coordinate reference system returned data, Default: getOption(\"getdata.crs\", default = 3857) erase_data sf, sfc, bbox object geometry erased data, Default: NULL dTolerance numeric; tolerance parameter, specified feature geometry. run st_simplify, input data specified long-lat coordinates sf_use_s2() returns TRUE, value dTolerance must specified meters. smooth TRUE, smooth data smoothr::smooth using default method parameters, Default: FALSE. sf_col Name use output sf column, Default: 'geometry'. sf_req TRUE, data must sf object. FALSE, data passed sfext::as_sf convert data sf object. ... Additional parameters passed format_data","code":""},{"path":"https://elipousson.github.io/getdata/reference/format_sf_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format simple feature data — format_sf_data","text":"sf object columns geometry modified based parameters.","code":""},{"path":"https://elipousson.github.io/getdata/reference/format_sf_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format simple feature data — format_sf_data","text":"Convert data sf object sfext::as_sf sf_req FALSE Make data valid sf::st_make_valid needed Format data format_data using ... parameters Erase data overlapping erase_data (suggested use water open space) Simplify geometry sf::st_simplify dTolerance provided Smooth geometry smoothr::smooth smooth TRUE Rename sf column match sf_col (defaults \"geometry\") helper functions format_sf_data additional formatting functions sf data described details. Helper functions format_sf_data: erase_data: erase intersection x erase_data (validity erase_data checked sfext::st_erase x completing operation. rename_sf_col: Rename sf column. relocate_sf_col: Relocate sf column selected columns (defaults dplyr::everything()).","code":""},{"path":"https://elipousson.github.io/getdata/reference/format_sf_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format simple feature data — format_sf_data","text":"","code":"library(sf) #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE  nc <- read_sf(system.file(\"shape/nc.shp\", package = \"sf\")) nc_county <- nc[2,]  # Transform coordinate reference system st_crs(nc)$epsg #> [1] 4267 st_crs(format_sf_data(nc, crs = 3857))$epsg #> [1] 3857  # Simplify and smooth geometry plot(nc_county, max.plot = 1)  nc_county_simple <- format_sf_data(nc_county, dTolerance = 5000, smooth = TRUE) plot(nc_county_simple, max.plot = 1)   # Erase data nc_co_water <- get_tigris_data(type = \"area water\", state = \"NC\", county = nc_county$NAME) #> Retrieving data for the year 2021 #>    |                                                                               |                                                                      |   0%   |                                                                               |=                                                                     |   1%   |                                                                               |====                                                                  |   6%   |                                                                               |=======                                                               |  10%   |                                                                               |==========                                                            |  14%   |                                                                               |============                                                          |  18%   |                                                                               |===============                                                       |  22%   |                                                                               |==================                                                    |  26%   |                                                                               |=====================                                                 |  30%   |                                                                               |=======================                                               |  33%   |                                                                               |==========================                                            |  37%   |                                                                               |=============================                                         |  41%   |                                                                               |================================                                      |  45%   |                                                                               |==================================                                    |  49%   |                                                                               |=====================================                                 |  53%   |                                                                               |========================================                              |  57%   |                                                                               |=============================================                         |  64%   |                                                                               |=============================================                         |  65%   |                                                                               |===================================================                   |  72%   |                                                                               |======================================================                |  77%   |                                                                               |========================================================              |  80%   |                                                                               |===========================================================           |  84%   |                                                                               |==============================================================        |  88%   |                                                                               |=================================================================     |  92%   |                                                                               |===================================================================   |  96%   |                                                                               |======================================================================| 100% nc_county_erased <- format_sf_data(nc_county, erase_data = nc_co_water) plot(nc_county_erased, max.plot = 1)   # If sf_req is set to FALSE, use any object that can be converted with sfext::as_sf nc_bbox <- st_bbox(nc) plot(format_sf_data(nc_bbox, erase_data = nc_county_simple, sf_req = FALSE))"},{"path":"https://elipousson.github.io/getdata/reference/get_airtable_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data from an Airtable base and optionally convert to a sf object — get_airtable_data","title":"Get data from an Airtable base and optionally convert to a sf object — get_airtable_data","text":"Get data Airtable base using Airtable API httr2 package. base includes coordinate fields/columns, optionally convert data simple feature object using sfext::df_to_sf() geometry = TRUE.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_airtable_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data from an Airtable base and optionally convert to a sf object — get_airtable_data","text":"","code":"get_airtable_data(   base,   table,   view = NULL,   record = NULL,   fields = NULL,   filter = NULL,   sort = NULL,   desc = FALSE,   max_records = NULL,   per_page = NULL,   cell_format = \"json\",   tz = NULL,   locale = NULL,   fields_by_id = FALSE,   offset = NULL,   geometry = FALSE,   location = NULL,   dist = getOption(\"getdata.dist\"),   diag_ratio = getOption(\"getdata.diag_ratio\"),   unit = getOption(\"getdata.unit\", \"meter\"),   asp = getOption(\"getdata.asp\"),   crs = getOption(\"getdata.crs\", 3857),   coords = getOption(\"getdata.coords\", c(\"lon\", \"lat\")),   from_crs = getOption(\"getdata.from_crs\", 4326),   remove_coords = TRUE,   address = getOption(\"getdata.address\", \"address\"),   geo = FALSE,   name_repair = janitor::make_clean_names,   token = NULL,   type = \"AIRTABLE_TOKEN\",   resp_type = \"records\" )  get_airtable_metadata(   base = NULL,   token = NULL,   type = \"AIRTABLE_TOKEN\",   resp_type = \"tables\" )"},{"path":"https://elipousson.github.io/getdata/reference/get_airtable_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data from an Airtable base and optionally convert to a sf object — get_airtable_data","text":"base Airtable base identifier. Required. table Airtable table name identifier. Required. view Airtable view identifier, Default: NULL record Airtable record identifier, Default: NULL fields Fields return Airtable base, Default: NULL filter Filter apply records, Note: parameter placeholder currently implemented. Default: NULL sort Field sort , Default: NULL desc TRUE, sort descending order, Default: FALSE max_records Maximum number records return, Default: NULL. max_records larger 100, offset parameter used return multiple pages results single dataframe. per_page Max records return per page, Default: NULL cell_format Cell format \"Link another record\" fields (either \"json\" (unique ID) \"string\" (displayed character string)), Default: 'json' tz, locale Time zone locale, Defaults: NULL fields_by_id TRUE, return fields id, Default: FALSE offset Offset parameter, Default: NULL geometry TRUE, convert data simple feature object. Defaults FALSE. location sf object. multiple areas provided, unioned single sf object using sf::st_union() dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Distance units converted units matching GDAL units x; defaults \"meter\" asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp() returns value without modification. crs Cordinate reference system return, Default: 4326 sf_to_df() NULL df_to_sf(). coords Coordinate columns input data.frame output sf object (geometry 'centroid' 'point') Default: c(\"lon\", \"lat\"). from_crs df_to_sf(), coordinate reference system used coordinates well known text data frame. remove_coords df_to_sf(), TRUE, remove coordinate columns converting data frame simple feature object; defaults FALSE. address Address column name passed tidygeocoder::geocode() tidygeocoder::geo geo TRUE, use address_to_sf() geocode address column; defaults FALSE. name_repair Defaults \"check_unique\" token, type API token type, token defaults NULL type \"AIRTABLE_TOKEN\" (get_access_token(type = \"AIRTABLE_TOKEN\")). resp_type Response type return, Default: \"records\". Set resp_type \"resp\" return API response without additional formatting conversion.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_airtable_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get data from an Airtable base and optionally convert to a sf object — get_airtable_data","text":"function Airtable personal access token can create https://airtable.com/create/tokens save local environment set_access_token(token = <YOUR_PERSONAL_ACCESS_TOKEN>, type = \"AIRTABLE_TOKEN\"). function previously required Airtable API key can set using set_access_token(token = <YOUR_API_KEY>, type = \"AIRTABLE_API_KEY\"). However, Airtable process deprecating user API keys. get_airtable_data() requires scope includes data.records:read get_airtable_metadata() scope including schema.bases:read. Learn Airtable API https://airtable.com/developers/web/api/introduction","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_esri_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Use esri2sf to get data from an ArcGIS FeatureServer or MapServer for a\nlocation — get_esri_data","title":"Use esri2sf to get data from an ArcGIS FeatureServer or MapServer for a\nlocation — get_esri_data","text":"Wraps esri2sf::esri2sf() esri2sf::esri2df() functions download ArcGIS FeatureServer MapServer. Supports spatial filtering bounding box based location filtering location name (location name column provided). fall 2022, package suggests elipousson/esri2sf fork using httr2.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_esri_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use esri2sf to get data from an ArcGIS FeatureServer or MapServer for a\nlocation — get_esri_data","text":"","code":"get_esri_data(   url,   location = NULL,   dist = getOption(\"getdata.dist\"),   diag_ratio = getOption(\"getdata.diag_ratio\"),   unit = getOption(\"getdata.unit\"),   asp = getOption(\"getdata.asp\"),   crs = getOption(\"getdata.crs\", 3857),   where = NULL,   name = NULL,   name_col = NULL,   coords = NULL,   from_crs = getOption(\"getdata.crs\", 4326),   clean_names = TRUE,   token = NULL,   progress = TRUE,   quiet = FALSE,   .name_repair = janitor::make_clean_names,   ... )  get_esri_layers(   location = NULL,   layers = NULL,   url = NULL,   nm = NULL,   token = NULL,   clean_names = TRUE,   quiet = FALSE,   .name_repair = janitor::make_clean_names,   ... )  get_esri_metadata(url, token = NULL, meta = NULL, clean_names = TRUE)"},{"path":"https://elipousson.github.io/getdata/reference/get_esri_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use esri2sf to get data from an ArcGIS FeatureServer or MapServer for a\nlocation — get_esri_data","text":"url FeatureServer MapServer url retrieve data . Passed url parameter esri2sf::esri2sf() esri2sf::esri2df() functions. get_esri_layers(), optional url must service url base url one layer urls. location sf, sfc, bbox object (object convertible as_bbox(). Optional. dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Distance units converted units matching GDAL units x; defaults \"meter\" asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp() returns value without modification. crs Cordinate reference system return, Default: 4326 sf_to_df() NULL df_to_sf(). query string passed esri2sf, Default: NULL name, name_col Name value name column found ArcGIS FeatureServer MapServer data. coords Coordinate columns input data.frame output sf object (geometry 'centroid' 'point') Default: c(\"lon\", \"lat\"). from_crs df_to_sf(), coordinate reference system used coordinates well known text data frame. clean_names TRUE, use janitor::make_clean_names() returned metadata value. Ignored non-character values, e.g. meta = \"id\". token string authentication token. defaults NULL. progress Show progress bar cli::cli_progress_along() TRUE. Default FALSE. quiet TRUE, use suppressMessages() prevent printing messages requested layer. Defaults FALSE. .name_repair Defaults \"check_unique\" ... Arguments passed esri2sf::esri2sf outFields vector fields want include. default NULL fields. replaceDomainInfo TRUE, add domain information return data frame. Default FALSE. layers Either vector URLs, named list urls, numeric vector; defaults NULL. Optional url nm Name vector names add layers; defaults NULL. meta Name metadata list value return esri2sf::esrimeta, e.g. \"name\" return layer name. Defaults NULL.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_flickr_photos.html","id":null,"dir":"Reference","previous_headings":"","what":"Use FlickrAPI to get geotagged photos for a location — get_flickr_photos","title":"Use FlickrAPI to get geotagged photos for a location — get_flickr_photos","text":"Set API key using FlickrAPI::set_flickr_api_key() pass api_key parameter.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_flickr_photos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use FlickrAPI to get geotagged photos for a location — get_flickr_photos","text":"","code":"get_flickr_photos(   location = NULL,   dist = NULL,   diag_ratio = NULL,   unit = NULL,   asp = NULL,   user_id = NULL,   tags = NULL,   license_id = \"cc0\",   sort = \"date-posted\",   desc = FALSE,   img_size = \"s\",   extras = c(\"description\", \"date_taken\", \"tags\", \"geo\"),   per_page = 100,   page = 1,   orientation = NULL,   geometry = TRUE,   crs = 4326,   key = NULL )"},{"path":"https://elipousson.github.io/getdata/reference/get_flickr_photos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use FlickrAPI to get geotagged photos for a location — get_flickr_photos","text":"location sf bbox object use creating bounding box getting photos Flickr. dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Distance units converted units matching GDAL units x; defaults \"meter\" asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp() returns value without modification. user_id NSID user photos search. parameter NULL passed public photos searched. tags vector tags search . license_id license id photos. possible values, see Flickr API method flickr.photos.licenses.getInfo see details information. license_id provided, \"license\" added extras. sort Supported options include \"date-posted\",\"date-taken\", \"interestingness\", \"relevance\" desc TRUE return images descending sort order, FALSE, return ascending sort order. Ignored sort set \"relevance\". img_size Image size; defaults \"s\" (small). Options ranging smallest largest size include \"sq\" (square), \"t\", \"s\", \"q\", \"m\", \"n\", \"z\", \"c\", \"l\", \"o\" (original). extras Defaults \"description\", \"date_taken\", \"tags\", \"geo\". per_page Photos return per page search results, Default: 100. Maximum 250 location provided 500 otherwise. page Page return. page greater length 1, loop pages. may cause issues API access large page range provided. Default: 1 orientation img_size length 1, photos filtered one supported orientations (\"portrait\", \"landscape\", \"square\"); defaults NULL. geometry TRUE, include \"geo\" extras convert photos data frame sf object. Passed geo parameter FlickrAPI::get_photo_search() crs Coordinate reference system sf object return geometry TRUE. key Flickr API key. api_key NULL, FlickrAPI::getPhotoSearch uses FlickrAPI::getFlickrAPIKey() use environment variable \"FLICKR_API_KEY\" key. Use set_access_token() w/ type = \"FLICKR_API_KEY\" FlickrAPI::setFlickrAPIKey()","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_flickr_photos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use FlickrAPI to get geotagged photos for a location — get_flickr_photos","text":"data frame photo information sf object geometry based latitude longitude geocoded photos.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_flickr_photos.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use FlickrAPI to get geotagged photos for a location — get_flickr_photos","text":"License id options: license_id can integer 0 10 corresponding license code including: \"c\" (Rights Reserved), \"-bc-sa\" (Attribution-NonCommercial-ShareAlike), \"-nc\" (Attribution-NonCommercial), \"-nc-nd\" (Attribution-NonCommercial-NoDerivs), \"\" (Attribution), \"-sa\" (Attribution-ShareAlike), \"-nd\" (Attribution-NoDerivs), \"nkc\" (known copyright restrictions), \"pd-us\" (United States Government Work), \"cc0\" (Public Domain Dedication), \"pd\" (Public Domain Mark).","code":""},{"path":[]},{"path":"https://elipousson.github.io/getdata/reference/get_gsheet_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Use googlesheets4 to get a data frame or simple feature data from a Google Sheet — get_gsheet_data","title":"Use googlesheets4 to get a data frame or simple feature data from a Google Sheet — get_gsheet_data","text":"Use googlesheets4 get data frame simple feature data Google Sheet","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_gsheet_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use googlesheets4 to get a data frame or simple feature data from a Google Sheet — get_gsheet_data","text":"","code":"get_gsheet_data(   url,   sheet = NULL,   ss = NULL,   ask = FALSE,   geometry = FALSE,   location = NULL,   dist = getOption(\"getdata.dist\"),   diag_ratio = getOption(\"getdata.diag_ratio\"),   unit = getOption(\"getdata.unit\", \"meter\"),   asp = getOption(\"getdata.asp\"),   coords = getOption(\"getdata.coords\", c(\"lon\", \"lat\")),   remove_coords = TRUE,   address = getOption(\"getdata.address\", \"address\"),   geo = FALSE,   from_crs = 4326,   clean_names = TRUE,   ... )"},{"path":"https://elipousson.github.io/getdata/reference/get_gsheet_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use googlesheets4 to get a data frame or simple feature data from a Google Sheet — get_gsheet_data","text":"url Google Sheets url sheet Sheet read, sense \"worksheet\" \"tab\". can identify sheet name, string, position, number. Ignored sheet specified via range. neither argument specifies sheet, defaults first visible sheet. ss Something identifies Google Sheet: file id string drive_id URL can recover id one-row dribble, googledrive represents Drive files instance googlesheets4_spreadsheet, gs4_get() returns Processed as_sheets_id(). ask TRUE, ask name Google Sheet read ss provided sfext::read_sf_gsheet. geometry Type geometry include data frame. options include \"drop\", \"wkt\", \"centroid\", \"point\", Default: 'centroid'. location sf object. multiple areas provided, unioned single sf object using sf::st_union() dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Distance units converted units matching GDAL units x; defaults \"meter\" asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp() returns value without modification. coords Coordinate columns input data.frame output sf object (geometry 'centroid' 'point') Default: c(\"lon\", \"lat\"). remove_coords df_to_sf(), TRUE, remove coordinate columns converting data frame simple feature object; defaults FALSE. address Address column name passed tidygeocoder::geocode() tidygeocoder::geo geo TRUE, use address_to_sf() geocode address column; defaults FALSE. from_crs df_to_sf(), coordinate reference system used coordinates well known text data frame. clean_names TRUE, clean names provided nm created based value col using janitor::clean_names. FALSE, use names provided. ... parameters passed onto methods.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_location.html","id":null,"dir":"Reference","previous_headings":"","what":"Get location of a specified type based on name, id, or location — get_location","title":"Get location of a specified type based on name, id, or location — get_location","text":"Filter name id use spatial filter based sf object geocoded street address. Optionally can use index list match type named list URLs sf objects.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get location of a specified type based on name, id, or location — get_location","text":"","code":"get_location(   type,   name = NULL,   name_col = \"name\",   id = NULL,   id_col = \"id\",   location = NULL,   index = NULL,   union = FALSE,   crs = getOption(\"getdata.crs\", 3857),   label = NULL,   class = \"sf\",   ... )"},{"path":"https://elipousson.github.io/getdata/reference/get_location.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get location of a specified type based on name, id, or location — get_location","text":"type Type location return. Type can sf object, e.g. data frame multiple neighborhoods character string can passed get_location_data(). index provided, character can also character string match name list. name Location name return. name_col Column name type name values, Default: 'name' Required name provided. id Location id return. id coerced character numeric match class id_col type. id_col Column name type id values, Default: 'id'. Required id provided. location address, bounding box (bbox), simple feature (sf) object passed sf::st_filter(). valid address addresses geocoded tidygeocoder::geo(), converted simple feature object, used spatial filter. bbox objects converted using sfext::sf_bbox_to_sf(). Multiple addresses supported. index Optional list used match type data, Default: NULL union TRUE, location geometry unioned sf::st_union() names combined single value. Default: FALSE. crs Coordinate reference system return; defaults NULL returns data using coordinate reference system provided type location. label Label optionally added \"label\" column; must length 1 match number rows returned based parameters. union = TRUE, using label recommended. Default: NULL class Class object return; defaults \"sf\". ... Additional parameters passed get_location_data() type character index NULL.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_location.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get location of a specified type based on name, id, or location — get_location","text":"simple feature object data provided type.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_location.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get location of a specified type based on name, id, or location — get_location","text":"","code":"nc <- sfext::read_sf_path(system.file(\"shape/nc.shp\", package = \"sf\"))  # get_location works with a type sf object and name and id values get_location(type = nc, name = \"Warren\", name_col = \"NAME\") #> Simple feature collection with 1 feature and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -78.32125 ymin: 36.19595 xmax: -77.89886 ymax: 36.55294 #> Geodetic CRS:  NAD27 #> # A tibble: 1 × 15 #>    AREA PERIMETER CNTY_ CNTY_ID NAME   FIPS  FIPSNO CRESS_ID BIR74 SID74 NWBIR74 #>   <dbl>     <dbl> <dbl>   <dbl> <chr>  <chr>  <dbl>    <int> <dbl> <dbl>   <dbl> #> 1 0.118      1.42  1836    1836 Warren 37185  37185       93   968     4     748 #> # ℹ 4 more variables: BIR79 <dbl>, SID79 <dbl>, NWBIR79 <dbl>, #> #   geometry <MULTIPOLYGON [°]> get_location(type = nc, id = 37185, id_col = \"FIPSNO\") #> Simple feature collection with 1 feature and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -78.32125 ymin: 36.19595 xmax: -77.89886 ymax: 36.55294 #> Geodetic CRS:  NAD27 #> # A tibble: 1 × 15 #>    AREA PERIMETER CNTY_ CNTY_ID NAME   FIPS  FIPSNO CRESS_ID BIR74 SID74 NWBIR74 #>   <dbl>     <dbl> <dbl>   <dbl> <chr>  <chr>  <dbl>    <int> <dbl> <dbl>   <dbl> #> 1 0.118      1.42  1836    1836 Warren 37185  37185       93   968     4     748 #> # ℹ 4 more variables: BIR79 <dbl>, SID79 <dbl>, NWBIR79 <dbl>, #> #   geometry <MULTIPOLYGON [°]>  # type can also be a file path get_location(   type = system.file(\"shape/nc.shp\", package = \"sf\"),   name = \"Hertford\",   name_col = \"NAME\" ) #> Simple feature collection with 1 feature and 14 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -77.21767 ymin: 36.23024 xmax: -76.7075 ymax: 36.55629 #> Geodetic CRS:  NAD27 #> # A tibble: 1 × 15 #>    AREA PERIMETER CNTY_ CNTY_ID NAME   FIPS  FIPSNO CRESS_ID BIR74 SID74 NWBIR74 #>   <dbl>     <dbl> <dbl>   <dbl> <chr>  <chr>  <dbl>    <int> <dbl> <dbl>   <dbl> #> 1 0.097      1.67  1833    1833 Hertf… 37091  37091       46  1452     7     954 #> # ℹ 4 more variables: BIR79 <dbl>, SID79 <dbl>, NWBIR79 <dbl>, #> #   `_ogr_geometry_` <POLYGON [°]>  # type can also be an index name (if a named list of data sets, url values, or # path values is passed to index) get_location(   type = \"smaller\",   name = \"Hertford\",   name_col = \"NAME\",   index = list(     \"smaller\" = dplyr::filter(nc, AREA <= 0.10),     \"larger\" = dplyr::filter(nc, AREA > 0.15)   ) ) #> Simple feature collection with 1 feature and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -77.21767 ymin: 36.23024 xmax: -76.7075 ymax: 36.55629 #> Geodetic CRS:  NAD27 #> # A tibble: 1 × 15 #>    AREA PERIMETER CNTY_ CNTY_ID NAME   FIPS  FIPSNO CRESS_ID BIR74 SID74 NWBIR74 #>   <dbl>     <dbl> <dbl>   <dbl> <chr>  <chr>  <dbl>    <int> <dbl> <dbl>   <dbl> #> 1 0.097      1.67  1833    1833 Hertf… 37091  37091       46  1452     7     954 #> # ℹ 4 more variables: BIR79 <dbl>, SID79 <dbl>, NWBIR79 <dbl>, #> #   geometry <MULTIPOLYGON [°]>"},{"path":"https://elipousson.github.io/getdata/reference/get_location_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data for a location — get_location_data","title":"Get data for a location — get_location_data","text":"Returns data selected location list locations (map_location_data()). data character string, parameter passed sfext::read_sf_url(), sfext::read_sf_path(), sfext::read_sf_pkg(). function uses sfext::st_filter_ext() filter, crop, trim data provided location. location can also address.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_location_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data for a location — get_location_data","text":"","code":"get_location_data(   location = NULL,   dist = getOption(\"getdata.dist\"),   diag_ratio = getOption(\"getdata.diag_ratio\"),   unit = getOption(\"getdata.unit\", default = \"meter\"),   asp = getOption(\"getdata.asp\"),   data = NULL,   package = getOption(\"getdata.package\"),   filetype = getOption(\"getdata.filetype\", default = \"gpkg\"),   fn = NULL,   crop = TRUE,   trim = FALSE,   from_crs = getOption(\"getdata.from_crs\"),   crs = getOption(\"getdata.crs\", 3857),   class = \"sf\",   label = NULL,   index = NULL,   col = NULL,   var_names = NULL,   clean_names = FALSE,   range = NULL,   ... )  map_location_data(   location = NULL,   dist = NULL,   diag_ratio = NULL,   unit = NULL,   asp = NULL,   data = NULL,   package = NULL,   filetype = \"gpkg\",   fn = NULL,   crop = TRUE,   trim = FALSE,   from_crs = NULL,   crs = NULL,   class = \"list\",   label = NULL,   load = FALSE,   index = NULL,   range = NULL,   ... )"},{"path":"https://elipousson.github.io/getdata/reference/get_location_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data for a location — get_location_data","text":"location sf object. multiple areas provided, unioned single sf object using sf::st_union() dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Distance units converted units matching GDAL units x; defaults \"meter\" asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp() returns value without modification. data Character string (e.g. url, file path, name data package), sf, sfc, bbox  object including data area. package Name package search data. filetype File type use passing parameters sfext::read_sf_download() sfext::read_sf_pkg() (required extdata cached data). fn Function apply data filtering location returning function. crop TRUE, x cropped y using sf::st_crop(). trim TRUE, x trimmed y st_trim(). from_crs Coordinate reference system used match location CRS source data. crs Coordinate reference system return. class Class object return. label label optionally used map_location_data() name data objects list returned function. index list possible location, data, (optionally) package values. List must named include value named package package must NULL, set package based index. list NULL location /data character numeric values, location data assumed index values index list. index parameter supports nested lists created make_location_data_list() (using default key names \"location\" \"data\"). feature fully tested may result errors unexpected results. col as_sf_list, name column used group data x sf object used group nest data passing x. var_names named list following format, list(\"New var name\" = old_var_name), two column data frame first column new variable names second column old variable names; defaults NULL. clean_names TRUE, clean names provided nm created based value col using janitor::clean_names. FALSE, use names provided. range lonlat_to_sfc(), object coercible bbox object length 4 vector names xmin, xmax, ymin, ymax. coordinate pair falls outside latitude/longitude range defined vector inside range reversed, coordinates assumed lat/lon order switched lon/lat order converted point. Defaults c(\"xmin\" = -180, \"ymin\" = -50, \"xmax\" = 180, \"ymax\" = 60). Note default setting reverse valid coordinates north Anchorage, Alaska south New Zealand. ... additional parameters passed sfext::read_sf_path(), sfext::read_sf_url(), sfext::read_sf_pkg() sfext::st_filter_ext() load TRUE class \"list\", load data local environment; defaults FALSE.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_location_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get data for a location — get_location_data","text":"function previously supported county geoid, state name, abbreviation, geoid location. Currently, recommend using get_tigris_data() passing sf object location. Working sf lists data locations: map_location_data() makes easier work sf lists. supports data character vector, data sf list location single object, location character vector sf list (including lists bbox sfc objects), data location lists (list created make_location_data_list()).","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_open_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data from an open data portal (Socrata) for a location — get_open_data","title":"Get data from an open data portal (Socrata) for a location — get_open_data","text":"get_socrata_data get_open_data source_type set \"socrata\" (currently supported option). get_open_data can return selected dataset using Socrata Query Language (SoQL) parameters tibble sf object. Details SoQL queries found Socrata API documentation https://dev.socrata.com/docs/queries/.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_open_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data from an open data portal (Socrata) for a location — get_open_data","text":"","code":"get_open_data(   data = NULL,   source_url = NULL,   source_type = \"socrata\",   select = NULL,   where = NULL,   query = NULL,   location = NULL,   dist = NULL,   diag_ratio = NULL,   unit = NULL,   asp = NULL,   name_col = NULL,   name = NULL,   location_col = NULL,   coords = c(\"longitude\", \"latitude\"),   geometry = FALSE,   token = NULL,   type = NULL,   from_crs = 4326,   crs = NULL,   clean_names = TRUE,   quiet = FALSE,   .name_repair = janitor::make_clean_names )  get_socrata_data(   data = NULL,   source_url = NULL,   select = NULL,   where = NULL,   query = NULL,   location = NULL,   dist = NULL,   diag_ratio = NULL,   unit = NULL,   asp = NULL,   name_col = NULL,   name = NULL,   location_col = NULL,   coords = c(\"longitude\", \"latitude\"),   geometry = FALSE,   token = NULL,   type = NULL,   from_crs = 4326,   crs = NULL,   clean_names = TRUE )  get_socrata_metadata(source_url = NULL, data = NULL)  list_socrata_data(source_url)"},{"path":"https://elipousson.github.io/getdata/reference/get_open_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data from an open data portal (Socrata) for a location — get_open_data","text":"data data set identifier (known resource Socrata) url individual dataset. data set \"list\" valid source_url provided, function returns list available resources. data url, source_url must NULL. get_socrata_metadata requires data parameter. source_url data source url. Socrata, base url open data portal. source_type Data source type; defaults \"socrata\" currently supported option. select Names columns return transformed, equivalent SELECT SQL. Passed SODA $select parameter, see https://dev.socrata.com/docs/queries/select.html information. Condition filters rows return, equivalent SQL. Passed SODA $parameter, see https://dev.socrata.com/docs/queries/.html information. query full SoQL query string, one parameter. Passed SODA $query parameter, see https://dev.socrata.com/docs/queries/query.html information. location sf object. multiple areas provided, unioned single sf object using sf::st_union() dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Distance units converted units matching GDAL units x; defaults \"meter\" asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp() returns value without modification. name, name_col Name column Socrata data resource location names (e.g. County) name location return. location_col Name \"location\" \"point\" type column Socrata dataset. coords Coordinate columns input data.frame output sf object (geometry 'centroid' 'point') Default: c(\"lon\", \"lat\"). geometry TRUE coords provided, return sf object. Default FALSE. token, type Access token API Key token type (name used store token .Renvironment). token may required access data Socrata open data portals can stored environment variable set_access_token. from_crs Coordinate reference system used match location CRS source data. crs Coordinate reference system bounding box return; defaults NULL maintains crs input object. clean_names TRUE, clean names provided nm created based value col using janitor::clean_names. FALSE, use names provided. quiet TRUE, suppress messages downloading data. Defaults FALSE. .name_repair Defaults \"check_unique\"","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_open_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data from an open data portal (Socrata) for a location — get_open_data","text":"","code":"## Get Q2 2020 vehicle crash data for Cecil County, Maryland if (FALSE) {   get_open_data(     source_url = \"https://opendata.maryland.gov\",     data = \"65du-s3qu\",     where = \"(year = '2020') AND (quarter = 'Q2')\",     name_col = \"county_desc\",     name = \"Cecil\",     token = Sys.getenv(\"MARYLAND_OPEN_DATA_API_KEY\")   ) }"},{"path":"https://elipousson.github.io/getdata/reference/get_osm_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Use osmdata to get Open Street Map data for a location — get_osm_data","title":"Use osmdata to get Open Street Map data for a location — get_osm_data","text":"Use osmdata functions query overpass API access OSM data adjusted bounding box enclosing ways/relations around center location. information key value options, refer osm_common_tags reference table OSM Wiki https://wiki.openstreetmap.org/wiki/Map_features. Use osmdata package directly detailed control queries https://docs.ropensci.org/osmdata/","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_osm_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use osmdata to get Open Street Map data for a location — get_osm_data","text":"","code":"get_osm_data(   location = NULL,   dist = NULL,   diag_ratio = NULL,   unit = NULL,   asp = NULL,   key,   value = NULL,   features = NULL,   id = NULL,   type = NULL,   crs = NULL,   geometry = NULL,   osmdata = FALSE,   enclosing = NULL,   nodes_only = FALSE,   key_exact = TRUE,   value_exact = TRUE,   match_case = TRUE )  get_osm_id(id, type = NULL, crs = NULL, geometry = NULL, osmdata = FALSE)  get_osm_boundaries(   location,   level = NULL,   lang = \"en\",   crs = NULL,   enclosing = \"relation\",   geometry = NULL,   osmdata = FALSE )"},{"path":"https://elipousson.github.io/getdata/reference/get_osm_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use osmdata to get Open Street Map data for a location — get_osm_data","text":"location sf, sfc, bbox object converted bounding box sfext::st_bbox_ext() character object passed directly bbox parameter osmdata::opq(). dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Distance units converted units matching GDAL units x; defaults \"meter\" asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp() returns value without modification. key Feature key overpass API query. value Value feature key; can negated initial exclamation mark, value = \"!\", can also vector, value = c(\"\", \"\"). value = \"\" key = \"building\" values passed osmdata package preset list extracted osmdata::available_tags(). features named list format list(\"<key>\" = \"<value>\") character vector key-value pairs keys values enclosed escape-formatted quotations (see osmdata::add_osm_features()) examples latter option. id OpenStreetMap feature id without type id prefix. multiple id values provided, must use single consistent value geometry. type Type feature id; \"node\", \"way\", \"relation\". Optional id includes type prefix. crs Coordinate reference system output data; NULL, data remains Open Street Map coordinate reference system 4326. Default: NULL. geometry Geometry type output (\"polygons\", \"points\", \"lines\", \"multilines\", \"multipolygons\"); multiple geometry types needed set osmdata TRUE. Default NULL. osmdata TRUE return osmdata class object includes overpass API call, metadata including timestamp version numbers, available geometry types; defaults FALSE. enclosing enclosing \"relation\" \"way\", function uses osmdata::opq_enclosing() query OSM data (instead osmdata::add_osm_feature(). Defaults NULL. enclosing parameter provided, dist, diag_ratio, asp, unit parameters ignored center provided location used query. geometry set automatically based enclosing \"relation\" using \"multipolygons\" \"way\" using \"polygons\" geometry. nodes_only WARNING: parameter equivalent osm_types = \"node\" DEPRECATED. TRUE, query OSM nodes . OSM structures place = \"city\" highway = \"traffic_signals\" represented nodes . Queries built default return nodes, ways, relation, can inefficient node-queries. Setting value TRUE cases makes queries efficient, data returned osm_points list item. key_exact FALSE, key interpreted exactly; see https://wiki.openstreetmap.org/wiki/Overpass_API value_exact FALSE, value interpreted exactly match_case FALSE, matching key value sensitive case level Numeric administrative level (admin_level) boundary return; defaults NULL. multiple levels provided, admin levels min max values level returned. See https://wiki.openstreetmap.org/wiki/Key:admin_level information. used get_osm_boundaries(). lang Language boundary names include resulting data frame (e.g. \"en\" English \"es\" Spanish). Default language names always included results. Defaults \"en\". See https://wiki.openstreetmap.org/wiki/Multilingual_names information.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_osm_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use osmdata to get Open Street Map data for a location — get_osm_data","text":"simple feature object features using selected geometry type osmdata object features geometry types.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_state_tigris.html","id":null,"dir":"Reference","previous_headings":"","what":"Use tigris to get state-level data from the U.S. Census Bureau — get_tigris_data","title":"Use tigris to get state-level data from the U.S. Census Bureau — get_tigris_data","text":"Use tigris package download state-level data U.S. Census Bureau API optionally filter name GeoID.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_state_tigris.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use tigris to get state-level data from the U.S. Census Bureau — get_tigris_data","text":"","code":"get_tigris_data(   type = NULL,   state = getOption(\"getdata.state\"),   name = NULL,   name_col = c(\"name\", \"namelsad\", \"geoid\"),   crs = getOption(\"getdata.crs\", default = 3857),   cb = TRUE,   clean_names = TRUE,   cache = TRUE,   ... )"},{"path":"https://elipousson.github.io/getdata/reference/get_state_tigris.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use tigris to get state-level data from the U.S. Census Bureau — get_tigris_data","text":"type Type data return, Default: NULL; See details supported options. state State name, abbreviation, GeoID. Required. Defaults getOption(\"getdata.state\"). name, name_col Name columns filter name. name defaults NULL, name_col defaults c(\"namelsad\", \"namelsad\", \"geoid\") columns. crs Coordinate reference system returned data, Default: getOption(\"getdata.crs\", default = 3857) cb TRUE, download generalized (1:500k) file. FALSE, download detailed TIGER/Line file. Defaults TRUE (reverse default tigris functions). parameter used type set blocks, roads, primary secondary roads, area water, linear water, landmarks, zctas. clean_names TRUE, set .name_repair janitor::make_clean_names(); defaults TRUE. cache TRUE, set options(tigris_use_cache = TRUE) cache downloaded tigris data. Ignored getOption(\"tigris_use_cache\") NULL. ... Additional parameters passed tigris functions.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_state_tigris.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use tigris to get state-level data from the U.S. Census Bureau — get_tigris_data","text":"simple feature object matching type provided.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_state_tigris.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use tigris to get state-level data from the U.S. Census Bureau — get_tigris_data","text":"Supported data types: Different type values corresponded different tigris functions downloading U.S. Census Bureau API include. Supported options include: \"counties\", \"census places\", \"congressional districts\", \"legislative districts\", \"senate district\", \"tracts\", \"block groups\", \"blocks\", \"pumas\", \"voting districts\", \"zctas\", \"roads\", \"primary secondary roads\", \"area water\",  \"linear water\", \"landmarks\". tigris functions use \"state\" parameter (e.g. tigris::coastline tigris::rails)  supported function. Note default value cb parameter get_tigris_data TRUE default value original tigris package FALSE.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_static_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Use mapboxapi or bingmapr to get a static map image — get_static_map","title":"Use mapboxapi or bingmapr to get a static map image — get_static_map","text":"Get static map image using  Mapbox Static Maps API using mapboxapi::static_mapbox Bing Maps Static Map API using bingmapr::get_map_image. API key access token required services. Set bingmap API token using bingmapr::bing_maps_api_key Mapbox token mapboxapi::mb_access_token use set_access_token type = \"BING_MAPS_API_KEY\" type = \"MAPBOX_PUBLIC_TOKEN\".","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_static_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use mapboxapi or bingmapr to get a static map image — get_static_map","text":"","code":"get_static_mapbox(   location,   dist = NULL,   unit = \"meter\",   style_url = \"mapbox://styles/mapbox/light-v10\",   overlay_location = FALSE,   overlay_sf = NULL,   overlay_style = NULL,   zoom = NULL,   width = 600,   height = 400,   bearing = NULL,   pitch = NULL,   token = NULL,   ... )  get_osm_static_mapbox(   id = NULL,   key = NULL,   level = NULL,   location = NULL,   dist = NULL,   unit = \"meter\",   overlay_location = TRUE,   style_url = \"mapbox://styles/mapbox/light-v10\",   overlay_sf = NULL,   overlay_style = NULL,   zoom = NULL,   width = 600,   height = 400,   bearing = NULL,   pitch = NULL,   token = NULL,   ... )  get_location_static_mapbox(   type,   dist = NULL,   unit = \"meter\",   name = NULL,   name_col = \"name\",   id = NULL,   id_col = \"id\",   location = NULL,   index = NULL,   union = FALSE,   overlay_location = TRUE,   style_url = \"mapbox://styles/mapbox/light-v10\",   overlay_sf = NULL,   overlay_style = NULL,   zoom = NULL,   width = 600,   height = 400,   bearing = NULL,   pitch = NULL,   token = NULL,   ... )  get_static_bingmap(   location = NULL,   dist = NULL,   unit = \"m\",   imagery = \"BirdsEye\",   zoom = NULL,   width = 600,   height = 400,   bearing = NULL,   token = NULL,   ... )"},{"path":"https://elipousson.github.io/getdata/reference/get_static_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use mapboxapi or bingmapr to get a static map image — get_static_map","text":"location input location like request tiles. Can length-4 vector representing bounding box, sf object. input sf object supplied, use buffer_dist argument control much area want capture around layer. input sf object can arbitrary coordinate reference system, length-4 bounding box vector supplied instead must represent WGS84 longitude/latitude coordinates order c(xmin, ymin, xmax, ymax). dist Buffer distance passed buffer_dist parameter mapboxapi::static_mapbox() sfext::st_buffer_ext() get_static_bingmap(). unit Unit dist argument. Defaults \"meters\". style_url Style URL; defaults \"mapbox://styles/mapbox/light-v10\" overlay_location TRUE, use location (OpenStreetMap feature) overlay_sf parameter. Default FALSE. Ignored overlay_sf provided. overlay_sf overlay sf object (optional). function convert sf object GeoJSON plot basemap style. Spatial data large trigger error, added style Mapbox Studio instead. overlay_style named list vectors specifying style sf overlay. Possible names \"stroke\", \"stroke-width\" (\"stroke_width\"), \"stroke-opacity\" (\"stroke_opacity\"), \"fill\", \"fill-opacity\" (\"fill_opacity\"). fill stroke color values can specified six-digit hex codes color names, opacity width values supplied floating-point numbers. overlay_style NULL, style values can pulled columns names overlay_sf. zoom map zoom. map infer overlay unless longitude, latitude, zoom specified. width, height Map width height; defaults 600 px width 400 px height. pitch, bearing map pitch bearing; defaults NULL. pitch can range 0 60, bearing -360 360. token Optional token API key. Recommend setting Bing Maps API key using bingmapr::bing_maps_api_key() Mapbox access token mapboxapi::mb_access_token(). ... Additional parameters passed get_location_data() type character index NULL. id OpenStreetMap feature id without type id prefix. multiple id values provided, must use single consistent value geometry. key Feature key overpass API query. level Numeric administrative level (admin_level) boundary return; defaults NULL. multiple levels provided, admin levels min max values level returned. See https://wiki.openstreetmap.org/wiki/Key:admin_level information. used get_osm_boundaries(). type get_osm_static_mapbox(), type feature id; (\"node\", \"way\", \"relation\"); get_location_static_mapbox(), type location (see get_location() details. name Location name return. name_col Column name type name values, Default: 'name' Required name provided. id_col Column name type id values, Default: 'id'. Required id provided. index Optional list used match type data, Default: NULL union TRUE, location geometry unioned sf::st_union() names combined single value. Default: FALSE. imagery String imagery type, Default: 'BirdsEye' Supported values include: Aerial: Aerial imagery. AerialWithLabels: Aerial imagery road overlay. AerialWithLabelsOnDemand: Aerial imagery -demand road overlay. Streetside: Street-level imagery. BirdsEye: Birds Eye (oblique-angle) imagery. BirdsEyeWithLabels: Birds Eye (oblique-angle) imagery road overlay. Road: Roads without additional imagery. CanvasDark: dark version road maps. CanvasLight: lighter version road maps also details hill shading disabled. CanvasGray: grayscale version road maps","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_static_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use mapboxapi or bingmapr to get a static map image — get_static_map","text":"Variations get_static_mapbox include get_location_static_mapbox wrapping get_location() get_osm_static_mapbox wrapping get_osm_data(), get_osm_id(), get_osm_boundaries() cases, ... parameters passed getdata functions rather static map function. get_static_bingmap(), parameter names modified bingmapr::get_map_image() consistency, bearing parameter passed orientation token passed key.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_static_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use mapboxapi or bingmapr to get a static map image — get_static_map","text":"","code":"if (FALSE) {   get_osm_static_mapbox(     id = \"way/49664223\",     dist = 0.5,     unit = \"mi\",     overlay_style = list(       stroke = \"darkgreen\",       fill = \"green\",       fill_opacity = 0.25     )   )    nc <- sfext::read_sf_path(system.file(\"shape/nc.shp\", package = \"sf\"))    get_location_static_mapbox(     type = nc,     name = \"Ashe\",     name_col = \"NAME\",     dist = 50,     unit = \"mi\"   ) }"},{"path":"https://elipousson.github.io/getdata/reference/get_wiki_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Wikipedia articles for a location — get_wiki_data","title":"Get Wikipedia articles for a location — get_wiki_data","text":"Use Wikipedia API geosearch API get Wikipedia articles location. See https://www.mediawiki.org/wiki/Extension:GeoData information. returns Wikipedia articles coordinates.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_wiki_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Wikipedia articles for a location — get_wiki_data","text":"","code":"get_wiki_data(   location,   radius = FALSE,   primary = NULL,   details = NULL,   limit = 50,   list = \"geosearch\",   lang = getOption(\"getdata.lang\", default = \"en\"),   geometry = TRUE,   dist = getOption(\"getdata.dist\"),   diag_ratio = getOption(\"getdata.diag_ratio\"),   unit = getOption(\"getdata.unit\", \"meter\"),   asp = getOption(\"getdata.asp\"),   crs = getOption(\"getdata.unit\", 3857),   remove_coords = TRUE,   clean_names = TRUE )"},{"path":"https://elipousson.github.io/getdata/reference/get_wiki_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Wikipedia articles for a location — get_wiki_data","text":"location sf object. multiple areas provided, unioned single sf object using sf::st_union() radius TRUE, use dist buffer around center location; defaults FALSE primary NULL, search primary coordinates. Set primary \"\" \"secondary\" search coordinate types. details Additional detailed return results. Options include \"type\", \"name\", \"country\", \"region\"; defaults NULL. limit Number pages return (max 500); defaults 50 list method use query; \"geosearch\" returns data, \"resp\" returns response lang Language search Wikipedia; defaults \"en\". geometry TRUE, return sf object. FALSE, return data frame. Defaults FALSE. dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Distance units converted units matching GDAL units x; defaults \"meter\" asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp() returns value without modification. crs Coordinate reference system bounding box return; defaults NULL maintains crs input object. remove_coords df_to_sf(), TRUE, remove coordinate columns converting data frame simple feature object; defaults FALSE. clean_names TRUE, clean names provided nm created based value col using janitor::clean_names. FALSE, use names provided.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_wiki_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Wikipedia articles for a location — get_wiki_data","text":"function, location can either sf, sfc, bbox object title Wikipedia article related location.","code":""},{"path":[]},{"path":"https://elipousson.github.io/getdata/reference/getdata-package.html","id":null,"dir":"Reference","previous_headings":"","what":"getdata: Get Easy Access to Tabular and Spatial Data — getdata-package","title":"getdata: Get Easy Access to Tabular and Spatial Data — getdata-package","text":"Download format spatial non-spatial data simple filtering location.","code":""},{"path":[]},{"path":"https://elipousson.github.io/getdata/reference/getdata-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"getdata: Get Easy Access to Tabular and Spatial Data — getdata-package","text":"Maintainer: Eli Pousson eli.pousson@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://elipousson.github.io/getdata/reference/make_location_data_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a list of data and corresponding locations — make_location_data_list","title":"Make a list of data and corresponding locations — make_location_data_list","text":"function converts data location lists sf objects using as_sf_list. location_col, data_col, col (sets value), provided col passed as_sf_list allow creation sf list sf data frame using dplyr::group_nest().","code":""},{"path":"https://elipousson.github.io/getdata/reference/make_location_data_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a list of data and corresponding locations — make_location_data_list","text":"","code":"make_location_data_list(   data = NULL,   location = NULL,   key = c(\"location\", \"data\"),   ... )"},{"path":"https://elipousson.github.io/getdata/reference/make_location_data_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a list of data and corresponding locations — make_location_data_list","text":"data, location sf object list sf objects data corresponding locations. key Names location data returned list. ... Pass location_col /data_col group nest data provided location data. Use col set value.","code":""},{"path":"https://elipousson.github.io/getdata/reference/make_location_data_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a list of data and corresponding locations — make_location_data_list","text":"location data length length, combined single list. either one length 1 , length 1 object repeated match length longer object. Different length objects neither length 1 gives warning.","code":""},{"path":"https://elipousson.github.io/getdata/reference/make_location_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a grid over the bounding box of a location — make_location_grid","title":"Make a grid over the bounding box of a location — make_location_grid","text":"location single feature sf object, original columns object included output grid. location mutiple features, values name_col combined sfext::st_union_ext columns dropped. input sf object columns named id, rows, cols.","code":""},{"path":"https://elipousson.github.io/getdata/reference/make_location_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a grid over the bounding box of a location — make_location_grid","text":"","code":"make_location_grid(location, name_col = \"name\", unit = NULL, ...)"},{"path":"https://elipousson.github.io/getdata/reference/make_location_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a grid over the bounding box of a location — make_location_grid","text":"location sf, sfc, bbox object passed sfext::st_make_grid_ext name_col Column name collapse new name_col value, Default: 'name' unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Distance units converted units matching GDAL units x; defaults \"meter\" ... Arguments passed sfext::st_make_grid_ext x sf, sfc, bbox object, Default: NULL. Required. crs Coordinate reference system bounding box return; defaults NULL maintains crs input object. ncol,nrow Used set n either NULL; defaults NULL. row id added columns grid provided. n n NULL square TRUE, grid set automatically 10 cells wide, Default: NULL gutter Distance units column cell; gutter effectively serves margin negative buffer applied cells (including edges grid). desc TRUE, reverse standard order cell id numbering; defaults FALSE cellsize target cellsize \"polygons\", \"corners\", \"centers\"; set centers automatically style \"circle\", \"circle_offset\" buffer applied return circular polygons. style Style cell return options including \"rect\", \"square\", \"hex\", \"flat_top_hex\", \"circle\", \"circle_offset\" .id name use cell id column. Defaults \"id\". filter TRUE (trim TRUE) filter grid geometry x using st_filter_ext trim TRUE, x trimmed y st_trim().","code":""},{"path":"https://elipousson.github.io/getdata/reference/osm_building_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"OpenStreetMap building tags — osm_building_tags","title":"OpenStreetMap building tags — osm_building_tags","text":"Used get_osm_data key = \"building\".","code":""},{"path":"https://elipousson.github.io/getdata/reference/osm_building_tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OpenStreetMap building tags — osm_building_tags","text":"","code":"osm_building_tags"},{"path":"https://elipousson.github.io/getdata/reference/osm_building_tags.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"OpenStreetMap building tags — osm_building_tags","text":"character vector length 84","code":""},{"path":"https://elipousson.github.io/getdata/reference/osm_building_tags.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"OpenStreetMap building tags — osm_building_tags","text":"information building key https://wiki.openstreetmap.org/wiki/Key:building","code":""},{"path":"https://elipousson.github.io/getdata/reference/osm_common_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"Common OpenStreetMap tags — osm_common_tags","title":"Common OpenStreetMap tags — osm_common_tags","text":"subset tags scraped OpenStreetMap Wiki page Map features: https://wiki.openstreetmap.org/wiki/Map_features. tags url included reference table.","code":""},{"path":"https://elipousson.github.io/getdata/reference/osm_common_tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Common OpenStreetMap tags — osm_common_tags","text":"","code":"osm_common_tags"},{"path":"https://elipousson.github.io/getdata/reference/osm_common_tags.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Common OpenStreetMap tags — osm_common_tags","text":"data frame 272 rows 5 variables: key Key value Value description Description tag/usage category Category url OSM Wiki url","code":""},{"path":"https://elipousson.github.io/getdata/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://elipousson.github.io/getdata/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://elipousson.github.io/getdata/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://elipousson.github.io/getdata/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://elipousson.github.io/getdata/reference/replace_with_xwalk.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace values in a character vector or data frame with a crosswalk — replace_with_xwalk","title":"Replace values in a character vector or data frame with a crosswalk — replace_with_xwalk","text":"Use stringr::str_replace_all() replace values character vector (dplyr::across()) select columns data.frame. replace_street_dir_prefixes() replace_street_suffixes() pass reference data (street_dir_prefixes street_suffixes) dict parameter support formatting addresses bind_block_col().","code":""},{"path":"https://elipousson.github.io/getdata/reference/replace_with_xwalk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace values in a character vector or data frame with a crosswalk — replace_with_xwalk","text":"","code":"replace_with_xwalk(   x,   .cols = NULL,   xwalk = NULL,   dict = NULL,   abb = TRUE,   case = NULL,   .strict = TRUE,   ignore_case = TRUE )  replace_street_suffixes(   x,   street_suffix = \"street_type\",   xwalk = NULL,   abb = TRUE,   case = NULL )  replace_street_dir_prefixes(   x,   street_dir_prefix = \"street_dir_prefix\",   xwalk = NULL,   abb = TRUE,   case = NULL )"},{"path":"https://elipousson.github.io/getdata/reference/replace_with_xwalk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace values in a character vector or data frame with a crosswalk — replace_with_xwalk","text":"x data.frame character vector. x character vector, .cols optional. x data.frame, x required. .cols <tidy-select> Columns transform. select grouping columns already automatically handled verb (.e. summarise() mutate()). xwalk, dict Named list data frame minimum two columns one column contains replacement values values replace. xwalk NULL, dict used vice-versa. provided, xwalk values take precedence can used override dict add new values. abb abb TRUE (default), second column dict assumed abbreviation used replace values x replacement column. Otherwise, first column assumed hold replacement values second column assumed hold original values. example, replace_street_suffixes(), TRUE, replace full suffix names abbreviations. FALSE, replace abbreviations full street suffix names. case Case use text new columns modified values. Options include \"lower\", \"upper\", \"title\", \"sentence\". Defaults NULL leaves case . .strict TRUE (default), match whole strings appending \"^\" front \"$\" end pattern xwalk. ignore_case Passed stringr::regex() street_suffix Street suffix column apply replacement function . street_dir_prefix Street direction prefix column apply replacement function .","code":""},{"path":"https://elipousson.github.io/getdata/reference/replace_with_xwalk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace values in a character vector or data frame with a crosswalk — replace_with_xwalk","text":"","code":"address_df <-   data.frame(     \"bldg_num\" = c(\"100\", \"1415\", \"600\", \"10\"),     \"street_dir_prefix\" = c(NA, NA, \"N\", NA),     \"street_name\" = c(\"Holiday\", \"Key\", \"Charles\", \"Art Museum\"),     \"street_type\" = c(\"St\", \"Hwy\", \"St\", \"Dr\")   )  replace_street_suffixes(   c(\"Street\", \"Highway\", \"Avenue\", \"Drive\") ) #> [1] \"ST\"  \"HWY\" \"AVE\" \"DR\"   replace_street_suffixes(   address_df,   abb = FALSE,   case = \"sentence\" ) #>   bldg_num street_dir_prefix street_name street_type #> 1      100              <NA>     Holiday      Street #> 2     1415              <NA>         Key     Highway #> 3      600                 N     Charles      Street #> 4       10              <NA>  Art Museum       Drive  replace_street_dir_prefixes(   c(\"North\", \"East\", \"West\") ) #> [1] \"N\" \"E\" \"W\"  replace_street_dir_prefixes(   c(\"S\", \"W\", \"N\"),   abb = FALSE,   case = \"sentence\" ) #> [1] \"South\" \"West\"  \"North\""},{"path":"https://elipousson.github.io/getdata/reference/set_access_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Set or get an access token or API key to/from environment variables. — set_access_token","title":"Set or get an access token or API key to/from environment variables. — set_access_token","text":"Based mapboxapi::mb_access_token() function mapboxapi package Kyle Walker.","code":""},{"path":"https://elipousson.github.io/getdata/reference/set_access_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set or get an access token or API key to/from environment variables. — set_access_token","text":"","code":"set_access_token(   token,   overwrite = FALSE,   install = FALSE,   type = NULL,   quiet = FALSE,   call = caller_env() )  get_access_token(token = NULL, type = NULL, call = caller_env())"},{"path":"https://elipousson.github.io/getdata/reference/set_access_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set or get an access token or API key to/from environment variables. — set_access_token","text":"token access token API key; required set_access_token(). token provided; type required get_access_token(). Length 1 character vector list. named, name token used place type. overwrite TRUE, overwrite existing token; Default: FALSE install TRUE, install token use future sessions; Default: FALSE type Name token; defaults NULL. Optional token named. call Passed call parameter cli::cli_abort() improve error messages function used internally.","code":""},{"path":"https://elipousson.github.io/getdata/reference/set_pkg_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Set getdata or other package-specific options — set_pkg_options","title":"Set getdata or other package-specific options — set_pkg_options","text":"function can set named options package using convention \"pkg.option\". examples set_pkg_options(crs = 2804, .pkg = \"getdata\") sets option \"getdata.crs\" 2804. \"getdata.crs\" already set, overwrite must TRUE replace existing value.","code":""},{"path":"https://elipousson.github.io/getdata/reference/set_pkg_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set getdata or other package-specific options — set_pkg_options","text":"","code":"set_pkg_options(..., overwrite = FALSE, .pkg = \"getdata\")"},{"path":"https://elipousson.github.io/getdata/reference/set_pkg_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set getdata or other package-specific options — set_pkg_options","text":"... Named list options set, e.g. \"crs = 2804\" .pkg = \"getdata\" set \"getdata.crs\" 2804. overwrite TRUE, overwrite existing option value. .pkg Package name append option name.","code":""},{"path":"https://elipousson.github.io/getdata/reference/set_pkg_options.html","id":"options-for-the-getdata-package","dir":"Reference","previous_headings":"","what":"Options for the getdata package","title":"Set getdata or other package-specific options — set_pkg_options","text":"Implemented options (defaults used) getdata package include: dist diag_ratio unit (\"meter\") asp crs (3857) from_crs (4326) address (\"address\") package filetype (\"gpkg\") similar convention used maplayer package. use options implemented across functions may changed future.","code":""},{"path":"https://elipousson.github.io/getdata/reference/street_dir_prefixes.html","id":null,"dir":"Reference","previous_headings":"","what":"Street directional prefixes — street_dir_prefixes","title":"Street directional prefixes — street_dir_prefixes","text":"data frame based Appendix I4 Directionals U.S. Postal Service Publication 28 - Postal Addressing Standards. According U.S. Postal Service, \"Directionals commonly used Puerto Rican addresses descriptions, urbanization name identify geographic areas. ZIP+4 file, English equivalents used. Note: Although Spanish word West Oeste, abbreviation W used.\"","code":""},{"path":"https://elipousson.github.io/getdata/reference/street_dir_prefixes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Street directional prefixes — street_dir_prefixes","text":"","code":"street_dir_prefixes"},{"path":"https://elipousson.github.io/getdata/reference/street_dir_prefixes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Street directional prefixes — street_dir_prefixes","text":"data frame 8 rows 3 variables: street_dir_abb Street directional abbreviation street_dir_en Street directional name (English) street_dir_es Street directional name (Spanish)","code":""},{"path":"https://elipousson.github.io/getdata/reference/street_dir_prefixes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Street directional prefixes — street_dir_prefixes","text":"Source: https://pe.usps.com/text/pub28/28api_007.htm","code":""},{"path":"https://elipousson.github.io/getdata/reference/street_suffixes.html","id":null,"dir":"Reference","previous_headings":"","what":"Street suffix abbreviations — street_suffixes","title":"Street suffix abbreviations — street_suffixes","text":"data frame based Appendix C1 Street Suffix Abbreviations U.S. Postal Service Publication 28 - Postal Addressing Standards. data includes examples suffix forms primary street suffix names, common street suffixes suffix abbreviations, recommended official U.S. Postal Service standard suffix abbreviations.","code":""},{"path":"https://elipousson.github.io/getdata/reference/street_suffixes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Street suffix abbreviations — street_suffixes","text":"","code":"street_suffixes"},{"path":"https://elipousson.github.io/getdata/reference/street_suffixes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Street suffix abbreviations — street_suffixes","text":"data frame 206 rows 3 variables: street_suffix_abb U.S. Postal Service standard suffix abbreviation street_suffix Street suffix name street_suffix_common List column commonly used street suffix abbreviation","code":""},{"path":"https://elipousson.github.io/getdata/reference/street_suffixes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Street suffix abbreviations — street_suffixes","text":"Source: https://pe.usps.com/text/pub28/28apc_002.htm","code":""},{"path":"https://elipousson.github.io/getdata/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"page lists tidy eval tools reexported package rlang. learn using tidy eval scripts packages high level, see dplyr programming vignette ggplot2 packages vignette. Metaprogramming section Advanced R may also useful deeper dive. tidy eval operators {{, !!, !!! syntactic constructs specially interpreted tidy eval functions. mostly need {{, !! !!! advanced operators use simple cases. curly-curly operator {{ allows tunnel data-variables passed function arguments inside tidy eval functions. {{ designed individual arguments. pass multiple arguments contained dots, use ... normal way.   enquo() enquos() delay execution one several function arguments. former returns single expression, latter returns list expressions. defused, expressions longer evaluate . must injected back evaluation context !! (single expression) !!! (list expressions).   simple case, code equivalent usage {{ ... . Defusing enquo() enquos() needed complex cases, instance need inspect modify expressions way. .data pronoun object represents current slice data. variable name string, use .data pronoun subset variable [[.   Another tidy eval operator :=. makes possible use glue curly-curly syntax LHS =. technical reasons, R language support complex expressions left =, use := workaround.   Many tidy eval functions like dplyr::mutate() dplyr::summarise() give automatic name unnamed inputs. need create sort automatic names , use as_label(). instance, glue-tunnelling syntax can reproduced manually :   Expressions defused enquo() (tunnelled {{) need simple column names, can arbitrarily complex. as_label() handles cases gracefully. code assumes simple column name, use as_name() instead. safer throws error input name expected.","code":"my_function <- function(data, var, ...) {   data %>%     group_by(...) %>%     summarise(mean = mean({{ var }})) } my_function <- function(data, var, ...) {   # Defuse   var <- enquo(var)   dots <- enquos(...)    # Inject   data %>%     group_by(!!!dots) %>%     summarise(mean = mean(!!var)) } my_var <- \"disp\" mtcars %>% summarise(mean = mean(.data[[my_var]])) my_function <- function(data, var, suffix = \"foo\") {   # Use `{{` to tunnel function arguments and the usual glue   # operator `{` to interpolate plain strings.   data %>%     summarise(\"{{ var }}_mean_{suffix}\" := mean({{ var }})) } my_function <- function(data, var, suffix = \"foo\") {   var <- enquo(var)   prefix <- as_label(var)   data %>%     summarise(\"{prefix}_mean_{suffix}\" := mean(!!var)) }"},{"path":"https://elipousson.github.io/getdata/news/index.html","id":"getdata-0109000-2022-12-23","dir":"Changelog","previous_headings":"","what":"getdata 0.1.0.9000 (2022-12-23)","title":"getdata 0.1.0.9000 (2022-12-23)","text":"First development version! getdata works well code coverage 60% additional refactoring expected increase consistency syntax across functions overall performance.","code":""}]
