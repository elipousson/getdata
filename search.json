[{"path":"https://elipousson.github.io/getdata/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to getdata","title":"Contributing to getdata","text":"outlines propose change getdata (using contribution guidelines tidyverse packages). See tidyverse development contributing guide additional information.","code":""},{"path":"https://elipousson.github.io/getdata/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to getdata","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://elipousson.github.io/getdata/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to getdata","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://elipousson.github.io/getdata/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to getdata","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"elipousson/getdata\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://elipousson.github.io/getdata/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to getdata","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://elipousson.github.io/getdata/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to getdata","text":"Please note getdata project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://elipousson.github.io/getdata/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 getdata authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://elipousson.github.io/getdata/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Eli Pousson. Author, maintainer, copyright holder.","code":""},{"path":"https://elipousson.github.io/getdata/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pousson E (2022). getdata: Get Easy Access Tabular Spatial Data. https://github.com/elipousson/getdata, https://elipousson.github.io/getdata/.","code":"@Manual{,   title = {getdata: Get Easy Access to Tabular and Spatial Data},   author = {Eli Pousson},   year = {2022},   note = {https://github.com/elipousson/getdata, https://elipousson.github.io/getdata/}, }"},{"path":"https://elipousson.github.io/getdata/index.html","id":"getdata-","dir":"","previous_headings":"","what":"Get Easy Access to Tabular and Spatial Data","title":"Get Easy Access to Tabular and Spatial Data","text":"goal {getdata} make experience getting location data easier consistent across wide variety sources. {getdata} started part {overedge} package along {maplayer} {sfext}. {getdata} designed work well location-specific data packages {mapmaryland} {mapbaltimore} support reproducible approaches map-making place-based data analysis. Using data access functions {sfext} additional API wrapper functions, package supports data access sources including: ArcGIS FeatureServer MapServer layers (using {esri2sf}) U.S. Census Bureau data (using {tigris}) OpenStreetMap (using {osmdata}) Socrata Open Data resources (using {RSocrata}) Google Sheets (using {googlesheets4}) Flickr photos (using {FlickrAPI}) Static map images Mapbox (using {mapboxapi}) Airtable bases (using {httr2} Airtable API) Wikipedia articles (using {httr2} Wikipedia Geosearch API) spatial data sources including Google MyMaps, GitHub gists, data source already supported sf::read_sf() (see sfext::read_sf_ext() details) advantage using {getdata} provides consistent interface using location create bounding box spatial filtering. Many functions also support querying spatial data name id. possible, spatial filter used importing downloading data avoid need load large data files need small area. package also provides consistent approach handling API tokens keys caching data locally (see set_access_token() sfext::get_data_dir() details). related {sfext} package allows {getdata} supports easy conversion tabular data spatial data. example, source data coordinates, can convert data sf object. data address column, can geocode data using {tidygeocoder} package. data location name column, “neighborhood”, can join data simple feature object related geometry. also can turn options setting geometry = FALSE data access functions. Lastly, format_data() format_sf_data() functions provide convenient options working data downloaded. advanced R users may prefer create custom formatting scripts, functions designed support creation custom data formatting access functions format_md_crash_data() get_md_crash_data(). Fair warning: package optimized speed plans submit CRAN. package imports {rlang} non-standard evaluation error handling relies {dplyr}, {purrr}, tidyverse packages. Suggestions additional data sources support, new functions, improvements existing functions welcome.","code":""},{"path":"https://elipousson.github.io/getdata/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Get Easy Access to Tabular and Spatial Data","text":"can install development version getdata like :","code":"pak::pkg_install(\"elipousson/getdata\")"},{"path":"https://elipousson.github.io/getdata/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic usage","title":"Get Easy Access to Tabular and Spatial Data","text":"get_location_data() flexible function reading subsetting data. example, data file path can also URL, name data set another package, sf object. can use get_location() get specific location larger simple feature collection includes specific type locations, counties North Carolina. basic approach filtering name id: can access data within around specific location. example, get_location_data() can return counties within quarter-mile Warren County. similar approach works sources although may require API key work. must set provide API token key get_open_data(), get_airtable_data(), get_flickr_photos() work. get_ghseet_data() require user authentication (handled automatically {googlesheets4} package).","code":"library(getdata) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  # location is optional nc <- get_location_data(data = system.file(\"shape/nc.shp\", package = \"sf\")) # get_location works with a type sf object and name and id values location <- get_location(type = nc, name = \"Warren\", name_col = \"NAME\") nearby_counties <-   get_location_data(   data = nc,   location = location,   dist = 0.25,   unit = \"mi\" )  glimpse(nearby_counties) #> Rows: 6 #> Columns: 15 #> $ AREA      <dbl> 0.153, 0.118, 0.072, 0.190, 0.128, 0.142 #> $ PERIMETER <dbl> 2.206, 1.421, 1.085, 2.204, 1.554, 1.640 #> $ CNTY_     <dbl> 1832, 1836, 1842, 1846, 1897, 1913 #> $ CNTY_ID   <dbl> 1832, 1836, 1842, 1846, 1897, 1913 #> $ NAME      <chr> \"Northampton\", \"Warren\", \"Vance\", \"Halifax\", \"Franklin\", \"Na… #> $ FIPS      <chr> \"37131\", \"37185\", \"37181\", \"37083\", \"37069\", \"37127\" #> $ FIPSNO    <dbl> 37131, 37185, 37181, 37083, 37069, 37127 #> $ CRESS_ID  <int> 66, 93, 91, 42, 35, 64 #> $ BIR74     <dbl> 1421, 968, 2180, 3608, 1399, 4021 #> $ SID74     <dbl> 9, 4, 4, 18, 2, 8 #> $ NWBIR74   <dbl> 1066, 748, 1179, 2365, 736, 1851 #> $ BIR79     <dbl> 1606, 1190, 2753, 4463, 1863, 5189 #> $ SID79     <dbl> 3, 2, 6, 17, 0, 7 #> $ NWBIR79   <dbl> 1197, 844, 1492, 2980, 950, 2274 #> $ geometry  <POLYGON [°]> POLYGON ((-77.89524 36.5529..., POLYGON ((-78.13472 36.2365.… ## Get Q2 2020 vehicle crash data for Cecil County, Maryland   get_open_data(     source_url = \"https://opendata.maryland.gov\",     data = \"65du-s3qu\",     where = \"(year = '2020') AND (quarter = 'Q2')\",     name_col = \"county_desc\",     name = \"Cecil\",     token = Sys.getenv(\"MARYLAND_OPEN_DATA_API_KEY\")   )"},{"path":"https://elipousson.github.io/getdata/reference/format_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Format data frames and simple features using common approaches — format_data","title":"Format data frames and simple features using common approaches — format_data","text":"function can apply following common data cleaning tasks:","code":""},{"path":"https://elipousson.github.io/getdata/reference/format_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format data frames and simple features using common approaches — format_data","text":"","code":"format_data(   x,   var_names = NULL,   clean_names = TRUE,   replace_na_with = NULL,   replace_with_na = NULL,   replace_empty_char_with_na = TRUE,   fix_date = FALSE,   label = FALSE,   format_sf = FALSE,   ... )  rename_with_xwalk(x, xwalk = NULL, label = FALSE)  label_with_xwalk(x, xwalk)  fix_date(x)  bind_address_col(x, city = NULL, county = NULL, state = NULL)  bind_block_col(   x,   bldg_num = \"bldg_num\",   street_dir_prefix = \"street_dir_prefix\",   street_name = \"street_name\",   street_suffix = \"street_type\" )"},{"path":"https://elipousson.github.io/getdata/reference/format_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format data frames and simple features using common approaches — format_data","text":"x tibble data frame object var_names named list following format, list(\"New var name\" = old_var_name), two column data frame first column new variable names second column old variable names; defaults NULL. clean_names TRUE, pass data frame janitor::clean_names; defaults TRUE. replace_na_with named list pass tidyr::replace_na; defaults NULL. replace_with_na named list pass naniar::replace_with_na; defaults NULL. replace_empty_char_with_na TRUE, replace \"\" NA using naniar::replace_with_na_if, Default: TRUE fix_date TRUE, fix UNIX dates (common issue dates FeatureServer MapServer sources) , Default: TRUE label TRUE, pass xwalk label_with_xwalk label columns using original names. Defaults FALSE. ... Additional parameters passed format_sf_data xwalk data frame two columns using first column name second column value; named list. existing names x must values new names must names. city, county, state City, county, state bind data frame sf object. bldg_num, street_dir_prefix, street_name, street_suffix Column names use address information required generate block name number.","code":""},{"path":"https://elipousson.github.io/getdata/reference/format_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format data frames and simple features using common approaches — format_data","text":"input data frame simple feature object formatting functions applied.","code":""},{"path":"https://elipousson.github.io/getdata/reference/format_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format data frames and simple features using common approaches — format_data","text":"Applies stringr::str_squish stringr::str_trim character columns Optionally replaces character values \"\" NA values Optionally corrects UNIX formatted dates 1970-01-01 origins Optionally renames variables passing named list variables Bind columns address data: bind_address_col bind provided value city, county, state data frame (supplement address data consistent values variables) bind_block_col requires data frame columns named \"bldg_num\", \"street_dir_prefix\", \"street_name\", \"street_type\" binds derived values whether building even odd side block create block number (street segment), block face (street segment side) identifier.","code":""},{"path":"https://elipousson.github.io/getdata/reference/format_sf_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Format simple feature data — format_sf_data","title":"Format simple feature data — format_sf_data","text":"main format_sf_data function wrapper following common steps transforming sf object preparing mapping analysis:","code":""},{"path":"https://elipousson.github.io/getdata/reference/format_sf_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format simple feature data — format_sf_data","text":"","code":"format_sf_data(   x,   crs = getOption(\"getdata.crs\", default = 3857),   erase_data = NULL,   dTolerance = NULL,   smooth = FALSE,   sf_col = NULL,   sf_req = TRUE,   ... )  erase_data(x, erase_data = NULL)"},{"path":"https://elipousson.github.io/getdata/reference/format_sf_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format simple feature data — format_sf_data","text":"x sf object , sf_req FALSE, object can converted sf object sfext::as_sf. crs Coordinate reference system returned data, Default: getOption(\"getdata.crs\", default = 3857) erase_data sf, sfc, bbox object geometry erased data, Default: NULL dTolerance numeric; tolerance parameter, specified feature geometry. run st_simplify, input data specified long-lat coordinates sf_use_s2() returns TRUE, value dTolerance must specified meters. smooth TRUE, smooth data smoothr::smooth using default method parameters, Default: FALSE. sf_col Name use output sf column, Default: 'geometry'. sf_req TRUE, data must sf object. FALSE, data passed sfext::as_sf convert data sf object. ... Additional parameters passed format_data","code":""},{"path":"https://elipousson.github.io/getdata/reference/format_sf_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format simple feature data — format_sf_data","text":"sf object columns geometry modified based parameters.","code":""},{"path":"https://elipousson.github.io/getdata/reference/format_sf_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format simple feature data — format_sf_data","text":"Convert data sf object sfext::as_sf sf_req FALSE Make data valid sf::st_make_valid needed Format data format_data using ... parameters Erase data overlapping erase_data (suggested use water open space) Simplify geometry sf::st_simplify dTolerance provided Smooth geometry smoothr::smooth smooth TRUE Rename sf column match sf_col (defaults \"geometry\") helper functions format_sf_data additional formatting functions sf data described details. Helper functions format_sf_data: erase_data: erase intersection x erase_data (validity erase_data checked sfext::st_erase x completing operation. rename_sf_col: Rename sf column. relocate_sf_col: Relocate sf column selected columns (defaults dplyr::everything()).","code":""},{"path":"https://elipousson.github.io/getdata/reference/format_sf_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format simple feature data — format_sf_data","text":"","code":"library(sf) #> Linking to GEOS 3.8.0, GDAL 3.0.4, PROJ 6.3.1; sf_use_s2() is TRUE  nc <- read_sf(system.file(\"shape/nc.shp\", package = \"sf\")) nc_county <- nc[2,]  # Transform coordinate reference system st_crs(nc)$epsg #> [1] 4267 st_crs(format_sf_data(nc, crs = 3857))$epsg #> Error in format_data(x, ...): object 'xwalk' not found  # Simplify and smooth geometry plot(nc_county, max.plot = 1)  nc_county_simple <- format_sf_data(nc_county, dTolerance = 5000, smooth = TRUE) #> Error in format_data(x, ...): object 'xwalk' not found plot(nc_county_simple, max.plot = 1) #> Error in plot(nc_county_simple, max.plot = 1): object 'nc_county_simple' not found  # Erase data nc_co_water <- get_tigris_data(type = \"area water\", state = \"NC\", county = nc_county$NAME) #> Retrieving data for the year 2020 #>  Downloading: 49 kB      Downloading: 49 kB      Downloading: 52 kB      Downloading: 52 kB      Downloading: 56 kB      Downloading: 56 kB      Downloading: 56 kB      Downloading: 56 kB      Downloading: 65 kB      Downloading: 65 kB      Downloading: 66 kB      Downloading: 66 kB      Downloading: 66 kB      Downloading: 66 kB      Downloading: 74 kB      Downloading: 74 kB      Downloading: 74 kB      Downloading: 74 kB      Downloading: 83 kB      Downloading: 83 kB      Downloading: 83 kB      Downloading: 83 kB      Downloading: 91 kB      Downloading: 91 kB      Downloading: 91 kB      Downloading: 91 kB      Downloading: 100 kB      Downloading: 100 kB      Downloading: 100 kB      Downloading: 100 kB      #> Error in format_data(x, ...): object 'xwalk' not found nc_county_erased <- format_sf_data(nc_county, erase_data = nc_co_water) #> Error in format_data(x, ...): object 'xwalk' not found plot(nc_county_erased, max.plot = 1) #> Error in plot(nc_county_erased, max.plot = 1): object 'nc_county_erased' not found  # If sf_req is set to FALSE, use any object that can be converted with sfext::as_sf nc_bbox <- st_bbox(nc) plot(format_sf_data(nc_bbox, erase_data = nc_county_simple, sf_req = FALSE)) #> Error in format_data(x, ...): object 'xwalk' not found"},{"path":"https://elipousson.github.io/getdata/reference/get_admin_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get U.S. State and County boundary data (1:5 mi scale) for a location — get_admin_data","title":"Get U.S. State and County boundary data (1:5 mi scale) for a location — get_admin_data","text":"Get U.S. states counties packaged us_counties us_states data. See get_tigris_data() options.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_admin_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get U.S. State and County boundary data (1:5 mi scale) for a location — get_admin_data","text":"","code":"get_states(   location = NULL,   dist = NULL,   diag_ratio = NULL,   unit = NULL,   asp = NULL,   class = \"df\",   call = caller_env(),   ... )  get_counties(   location = NULL,   dist = NULL,   diag_ratio = NULL,   unit = NULL,   asp = NULL,   class = \"df\",   ... )"},{"path":"https://elipousson.github.io/getdata/reference/get_admin_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get U.S. State and County boundary data (1:5 mi scale) for a location — get_admin_data","text":"location sf, sfc, bbox object character string matches geoid, name, abb, statefp us_states us_counties. dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Distance units converted units matching GDAL units x; defaults \"meter\" asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp() returns value without modification. class Class data return, \"df\" (default), \"sf\", \"bbox\", \"sfc\" call execution environment currently running function, e.g. call = caller_env(). corresponding function call retrieved mentioned error messages source error. need supply call throwing condition helper function relevant mention message. Can also NULL defused function call respectively display call hard-code code display. information error calls, see Including function calls error messages. ... Additional parameters including geoid, name, state, county. additional identifier parameters used location NULL.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_admin_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get U.S. State and County boundary data (1:5 mi scale) for a location — get_admin_data","text":"","code":"get_states(   location = \"Maryland\" ) #> # A tibble: 1 × 7 #>   name     geoid abb   est_pop statefp bbox       wkt                            #>   <chr>    <chr> <chr>   <dbl> <chr>   <list>     <chr>                          #> 1 Maryland 24    MD    6018848 24      <bbox [4]> MULTIPOLYGON (((-8465780 4578…  get_counties(   name = \"Baltimore city, Maryland\" ) #> # A tibble: 1 × 9 #>   name          name_short abb_state est_pop geoid countyfp statefp bbox   wkt   #>   <chr>         <chr>      <chr>       <dbl> <chr> <chr>    <chr>   <list> <chr> #> 1 Baltimore ci… Baltimore  MD         609032 24510 510      24      <bbox> MULT…  # Using short names with abbreviated state names for look-up may result in inexact matches get_counties(   county = \"Baltimore, MD\" ) #> # A tibble: 2 × 9 #>   name          name_short abb_state est_pop geoid countyfp statefp bbox   wkt   #>   <chr>         <chr>      <chr>       <dbl> <chr> <chr>    <chr>   <list> <chr> #> 1 Baltimore Co… Baltimore  MD         828018 24005 005      24      <bbox> MULT… #> 2 Baltimore ci… Baltimore  MD         609032 24510 510      24      <bbox> MULT…  # Two-digit integer GeoIDs are supported # bbox and wkt columns are dropped when returning class \"sf\" get_states(   geoid = 24,   class = \"sf\" ) #> Simple feature collection with 1 feature and 5 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -8848525 ymin: 4566962 xmax: -8354410 ymax: 4825788 #> Projected CRS: WGS 84 / Pseudo-Mercator #> # A tibble: 1 × 6 #>   name     geoid abb   est_pop statefp                                  geometry #>   <chr>    <chr> <chr>   <dbl> <chr>                          <MULTIPOLYGON [m]> #> 1 Maryland 24    MD    6018848 24      (((-8465780 4578058, -8465715 4580663, -…  # sf locations are used as a spatial filter # Example not currently working #  get_counties( #    location = get_states(\"MD\", class = \"sf\"), #    class = \"sf\" #  ), #  \"sf\" # )"},{"path":"https://elipousson.github.io/getdata/reference/get_airtable_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Airtable data — get_airtable_data","title":"Get Airtable data — get_airtable_data","text":"Get Airtable data","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_airtable_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Airtable data — get_airtable_data","text":"","code":"get_airtable_data(   base,   table,   record = NULL,   fields = NULL,   filter = NULL,   sort = NULL,   desc = FALSE,   view = NULL,   max_records = NULL,   per_page = NULL,   cell_format = \"json\",   tz = NULL,   locale = NULL,   fields_by_id = FALSE,   offset = NULL,   token = NULL,   list = \"records\",   geometry = TRUE,   location = NULL,   dist = getOption(\"getdata.dist\"),   diag_ratio = getOption(\"getdata.diag_ratio\"),   unit = getOption(\"getdata.unit\", \"meter\"),   asp = getOption(\"getdata.asp\"),   crs = getOption(\"getdata.crs\", 3857),   coords = getOption(\"getdata.coords\", c(\"lon\", \"lat\")),   from_crs = getOption(\"getdata.from_crs\", 4326),   remove_coords = TRUE,   address = getOption(\"getdata.address\", \"address\"),   geo = FALSE,   clean_names = TRUE,   label = TRUE )"},{"path":"https://elipousson.github.io/getdata/reference/get_airtable_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Airtable data — get_airtable_data","text":"base Airtable base identifier table Airtable table name identifier record Airtable record identifier, Default: NULL fields Fields return Airtable base, Default: NULL filter Filter (currently supported), Default: NULL sort Field sort , Default: NULL desc TRUE, sort descending order, Default: FALSE view Airtable view name(?) identifier, Default: NULL max_records Max records return, Default: NULL per_page Max records return per page, Default: NULL cell_format Cell format, Default: 'json' tz Time zone, Default: NULL locale Locale, Default: NULL fields_by_id TRUE, return fields id, Default: FALSE offset Offset parameter, Default: NULL token API token, Default: NULL (get_access_token(type = \"AIRTABLE_API_KEY\")) list Data type return, Default: 'records' geometry Type geometry include data frame. options include \"drop\", \"wkt\", \"centroid\", \"point\", Default: 'centroid'. location sf object. multiple areas provided, unioned single sf object using sf::st_union dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Distance units converted units matching GDAL units x; defaults \"meter\" asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp() returns value without modification. crs Cordinate reference system return, Default: 4326 sf_to_df NULL df_to_sf. coords Coordinate columns input dataframe output sf object (geometry 'centroid' 'point') Default: c(\"lon\", \"lat\"). from_crs df_to_sf, coordinate reference system used coordinates well known text data frame. remove_coords df_to_sf, TRUE, remove coordinate columns converting data frame simple feature object; defaults FALSE. address Address column name passed tidygeocoder::geocode tidygeocoder::geo geo TRUE, use address_to_sf geocode address column; defaults FALSE. clean_names TRUE, clean names provided nm created based value col using janitor::clean_names. FALSE, use names provided. label label optionally used map_location_data name data objects list returned function.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_esri_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Use esri2sf to get data from an ArcGIS FeatureServer or MapServer for a\nlocation — get_esri_data","title":"Use esri2sf to get data from an ArcGIS FeatureServer or MapServer for a\nlocation — get_esri_data","text":"Wraps esri2sf::esri2sf esri2sf::esri2df function download ArcGIS FeatureServer MapServer. Supports spatial filtering bounding box based location filtering location name (location name column provided).","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_esri_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use esri2sf to get data from an ArcGIS FeatureServer or MapServer for a\nlocation — get_esri_data","text":"","code":"get_esri_data(   location = NULL,   dist = getOption(\"getdata.dist\"),   diag_ratio = getOption(\"getdata.diag_ratio\"),   unit = getOption(\"getdata.unit\"),   asp = getOption(\"getdata.asp\"),   crs = getOption(\"getdata.crs\", 3857),   url,   where = NULL,   name = NULL,   name_col = NULL,   coords = NULL,   from_crs = 4326,   clean_names = TRUE,   progress = TRUE,   ... )  get_esri_layers(location = NULL, layers, service_url = NULL, nm = NULL, ...)  get_esri_metadata(url, meta = \"name\", clean = TRUE)"},{"path":"https://elipousson.github.io/getdata/reference/get_esri_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use esri2sf to get data from an ArcGIS FeatureServer or MapServer for a\nlocation — get_esri_data","text":"location sf, sfc, bbox object (object convertible as_bbox(). Optional. dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Distance units converted units matching GDAL units x; defaults \"meter\" asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp() returns value without modification. crs Cordinate reference system return, Default: 4326 sf_to_df NULL df_to_sf. url FeatureServer MapServer url retrieve data . Passed url parameter esri2sf::esri2sf esri2sf::esri2df functions. query string passed esri2sf, Default: NULL name location name name_col name ArcGIS FeatureServer MapServer column location names features coords Coordinate columns input dataframe output sf object (geometry 'centroid' 'point') Default: c(\"lon\", \"lat\"). from_crs df_to_sf, coordinate reference system used coordinates well known text data frame. clean_names TRUE, pass data frame janitor::clean_names; defaults TRUE. progress Show progress bar pbapply::pblapply() TRUE. Default FALSE. ... Arguments passed esri2sf::esri2sf outFields vector fields want include. default NULL fields. bbox bbox class object sf::st_bbox() simple feature object can converted bounding box. token string authentication token (needed). defaults NULL. geomType string specifying layer geometry ('esriGeometryPolygon' 'esriGeometryPoint' 'esriGeometryPolyline' - NULL, try inferred server) replaceDomainInfo TRUE, add domain information return data frame. Default FALSE. geometry sf bbox object. sf objects single POINT feature currently supported. layers Either vector URLs, named list urls, numeric vector. service_url Base service URL layers located. nm Name vector names add layers; defaults NULL. meta Name metadata list value return esri2sf::esrimeta. clean TRUE, use janitor::make_clean_names returned metadata value (typically used name values).","code":""},{"path":[]},{"path":"https://elipousson.github.io/getdata/reference/get_flickr_photos.html","id":null,"dir":"Reference","previous_headings":"","what":"Use FlickrAPI to get geotagged photos for a location — get_flickr_photos","title":"Use FlickrAPI to get geotagged photos for a location — get_flickr_photos","text":"Set API key using FlickrAPI::set_flickr_api_key() pass api_key parameter. Currently relies fork package https://github.com/elipousson/FlickrAPI","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_flickr_photos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use FlickrAPI to get geotagged photos for a location — get_flickr_photos","text":"","code":"get_flickr_photos(   location = NULL,   dist = NULL,   diag_ratio = NULL,   unit = NULL,   asp = NULL,   user_id = NULL,   tags = NULL,   license_id = \"cc0\",   sort = \"date-posted\",   desc = FALSE,   img_size = \"s\",   extras = c(\"description\", \"date_taken\", \"tags\", \"geo\"),   per_page = 100,   page = 1,   orientation = NULL,   geometry = TRUE,   crs = 4326,   key = NULL )"},{"path":"https://elipousson.github.io/getdata/reference/get_flickr_photos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use FlickrAPI to get geotagged photos for a location — get_flickr_photos","text":"location sf bbox object use creating bounding box getting photos Flickr. dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Distance units converted units matching GDAL units x; defaults \"meter\" asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp() returns value without modification. user_id NSID user photos search. parameter NULL passed public photos searched. tags vector tags search . license_id license id photos. possible values see Flickr API method flickr.photos.licenses.getInfo see details information. sort Supported options include \"date-posted\",\"date-taken\", \"interestingness\", \"relevance\" desc TRUE return images descending sort order, FALSE, return ascending sort order. Ignored sort set \"relevance\". img_size Defaults \"s\" (small). Options ranging smallest largest include \"sq\", \"t\", \"s\", \"q\", \"m\", \"n\", \"z\", \"c\", \"l\", \"o\" extras Defaults \"description\", \"date_taken\", \"tags\", \"geo\". per_page Photos return per page search, Default: 100. Maximum 250 location provided 500 otherwise. page page greater length 1, function uses purrr::map_dfr() return results pages may cause issues API access large page range provided. Default: 1 orientation img_size length 1, photos filtered one supported orientations (\"portrait\", \"landscape\", \"square\"); defaults NULL. geometry TRUE, include \"geo\" extras convert photos data frame sf object. crs Coordinate reference system sf object return geometry TRUE. key Flickr API key. api_key 'NULL', FlickrAPI::getPhotoSearch uses FlickrAPI::getFlickrAPIKey() use environment variable \"FLICKR_API_KEY\" key. Use set_access_token() w/ type = \"FLICKR_API_KEY\" FlickrAPI::setFlickrAPIKey()","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_flickr_photos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use FlickrAPI to get geotagged photos for a location — get_flickr_photos","text":"data frame photo information sf object geometry based latitude longitude geocoded photos.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_flickr_photos.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use FlickrAPI to get geotagged photos for a location — get_flickr_photos","text":"License id options: license_id can integer 0 10 corresponding license code including: \"c\" (Rights Reserved), \"-bc-sa\" (Attribution-NonCommercial-ShareAlike), \"-nc\" (Attribution-NonCommercial), \"-nc-nd\" (Attribution-NonCommercial-NoDerivs), \"\" (Attribution), \"-sa\" (Attribution-ShareAlike), \"-nd\" (Attribution-NoDerivs), \"nkc\" (known copyright restrictions), \"pd-us\" (United States Government Work), \"cc0\" (Public Domain Dedication), \"pd\" (Public Domain Mark).","code":""},{"path":[]},{"path":"https://elipousson.github.io/getdata/reference/get_gsheet_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Use googlesheets4 to get a data frame or simple feature data from a Google Sheet — get_gsheet_data","title":"Use googlesheets4 to get a data frame or simple feature data from a Google Sheet — get_gsheet_data","text":"Use googlesheets4 get data frame simple feature data Google Sheet","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_gsheet_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use googlesheets4 to get a data frame or simple feature data from a Google Sheet — get_gsheet_data","text":"","code":"get_gsheet_data(   url,   sheet = NULL,   ss = NULL,   ask = FALSE,   geometry = FALSE,   location = NULL,   dist = getOption(\"getdata.dist\"),   diag_ratio = getOption(\"getdata.diag_ratio\"),   unit = getOption(\"getdata.unit\", \"meter\"),   asp = getOption(\"getdata.asp\"),   coords = getOption(\"getdata.coords\", c(\"lon\", \"lat\")),   remove_coords = TRUE,   address = getOption(\"getdata.address\", \"address\"),   geo = FALSE,   from_crs = 4326,   clean_names = TRUE,   ... )"},{"path":"https://elipousson.github.io/getdata/reference/get_gsheet_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use googlesheets4 to get a data frame or simple feature data from a Google Sheet — get_gsheet_data","text":"url Google Sheets url sheet Sheet read, sense \"worksheet\" \"tab\". can identify sheet name, string, position, number. Ignored sheet specified via range. neither argument specifies sheet, defaults first visible sheet. ss Something identifies Google Sheet: file id string drive_id URL can recover id one-row dribble, googledrive represents Drive files instance googlesheets4_spreadsheet, gs4_get() returns Processed as_sheets_id(). ask TRUE, ask name Google Sheet read ss provided sfext::read_sf_gsheet. geometry Type geometry include data frame. options include \"drop\", \"wkt\", \"centroid\", \"point\", Default: 'centroid'. location sf object. multiple areas provided, unioned single sf object using sf::st_union dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Distance units converted units matching GDAL units x; defaults \"meter\" asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp() returns value without modification. coords Coordinate columns input dataframe output sf object (geometry 'centroid' 'point') Default: c(\"lon\", \"lat\"). remove_coords df_to_sf, TRUE, remove coordinate columns converting data frame simple feature object; defaults FALSE. address Address column name passed tidygeocoder::geocode tidygeocoder::geo geo TRUE, use address_to_sf geocode address column; defaults FALSE. from_crs df_to_sf, coordinate reference system used coordinates well known text data frame. clean_names TRUE, clean names provided nm created based value col using janitor::clean_names. FALSE, use names provided. ... parameters passed onto methods.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_location.html","id":null,"dir":"Reference","previous_headings":"","what":"Get location of a specified type based on name, id, or location — get_location","title":"Get location of a specified type based on name, id, or location — get_location","text":"Filter name id use spatial filter based sf object geocoded street address. Optionally can use index list match type named list URLs sf objects.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_location.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get location of a specified type based on name, id, or location — get_location","text":"","code":"get_location(   type,   name = NULL,   name_col = \"name\",   id = NULL,   id_col = \"id\",   location = NULL,   index = NULL,   union = FALSE,   crs = getOption(\"getdata.crs\", 3857),   label = NULL,   class = \"sf\",   ... )"},{"path":"https://elipousson.github.io/getdata/reference/get_location.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get location of a specified type based on name, id, or location — get_location","text":"type Type location return. Type can sf object, e.g. data frame multiple neighborhoods character string can passed get_location_data. index provided, character can also character string match name list. name Location name return. name_col Column name type name values, Default: 'name' Required name provided. id Location id return. id coerced character numeric match class id_col type. id_col Column name type id values, Default: 'id'. Required id provided. location address, bounding box (bbox), simple feature (sf) object passed sf::st_filter. valid address addresses geocoded tidygeocoder::geo, converted simple feature object, used spatial filter. bbox objects converted using sfext::sf_bbox_to_sf(). Multiple addresses supported. index Optional list used match type data, Default: NULL union TRUE, location geometry unioned sf::st_union names combined single value. Default: FALSE. crs Coordinate reference system return; defaults NULL returns data using coordinate reference system provided type location. label Label optionally added \"label\" column; must length 1 match number rows returned based parameters. union = TRUE, using label recommended. Default: NULL class Class object return; defaults \"sf\". ... Additional parameters passed get_location_data type character index NULL.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_location.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get location of a specified type based on name, id, or location — get_location","text":"simple feature object data provided type.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_location.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get location of a specified type based on name, id, or location — get_location","text":"","code":"nc <- sfext::read_sf_path(system.file(\"shape/nc.shp\", package = \"sf\"))  # get_location works with a type sf object and name and id values get_location(type = nc, name = \"Warren\", name_col = \"NAME\") #> Simple feature collection with 1 feature and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -78.32125 ymin: 36.19595 xmax: -77.89886 ymax: 36.55294 #> Geodetic CRS:  NAD27 #> # A tibble: 1 × 15 #>    AREA PERIMETER CNTY_ CNTY_ID NAME   FIPS  FIPSNO CRESS_ID BIR74 SID74 NWBIR74 #>   <dbl>     <dbl> <dbl>   <dbl> <chr>  <chr>  <dbl>    <int> <dbl> <dbl>   <dbl> #> 1 0.118      1.42  1836    1836 Warren 37185  37185       93   968     4     748 #> # … with 4 more variables: BIR79 <dbl>, SID79 <dbl>, NWBIR79 <dbl>, #> #   geometry <MULTIPOLYGON [°]> get_location(type = nc, id = 37185, id_col = \"FIPSNO\") #> Simple feature collection with 1 feature and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -78.32125 ymin: 36.19595 xmax: -77.89886 ymax: 36.55294 #> Geodetic CRS:  NAD27 #> # A tibble: 1 × 15 #>    AREA PERIMETER CNTY_ CNTY_ID NAME   FIPS  FIPSNO CRESS_ID BIR74 SID74 NWBIR74 #>   <dbl>     <dbl> <dbl>   <dbl> <chr>  <chr>  <dbl>    <int> <dbl> <dbl>   <dbl> #> 1 0.118      1.42  1836    1836 Warren 37185  37185       93   968     4     748 #> # … with 4 more variables: BIR79 <dbl>, SID79 <dbl>, NWBIR79 <dbl>, #> #   geometry <MULTIPOLYGON [°]>  # type can also be a file path get_location(   type = system.file(\"shape/nc.shp\", package = \"sf\"),   name = \"Hertford\",   name_col = \"NAME\" ) #> Error in format_data(data, var_names = var_names, clean_names = clean_names): object 'xwalk' not found  # type can also be an index name (if a named list of data sets, url values, or # path values is passed to index) get_location(   type = \"smaller\",   name = \"Hertford\",   name_col = \"NAME\",   index = list(     \"smaller\" = dplyr::filter(nc, AREA <= 0.10),     \"larger\" = dplyr::filter(nc, AREA > 0.15)   ) ) #> Simple feature collection with 1 feature and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -77.21767 ymin: 36.23024 xmax: -76.7075 ymax: 36.55629 #> Geodetic CRS:  NAD27 #> # A tibble: 1 × 15 #>    AREA PERIMETER CNTY_ CNTY_ID NAME   FIPS  FIPSNO CRESS_ID BIR74 SID74 NWBIR74 #>   <dbl>     <dbl> <dbl>   <dbl> <chr>  <chr>  <dbl>    <int> <dbl> <dbl>   <dbl> #> 1 0.097      1.67  1833    1833 Hertf… 37091  37091       46  1452     7     954 #> # … with 4 more variables: BIR79 <dbl>, SID79 <dbl>, NWBIR79 <dbl>, #> #   geometry <MULTIPOLYGON [°]>"},{"path":"https://elipousson.github.io/getdata/reference/get_location_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data for a location — get_location_data","title":"Get data for a location — get_location_data","text":"Returns data selected location list locations (map_location_data). data character string, parameter passed sfext::read_sf_url, sfext::read_sf_path, sfext::read_sf_pkg. function uses sfext::st_filter_ext() filter, crop, trim data provided location. location can also address.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_location_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data for a location — get_location_data","text":"","code":"get_location_data(   location = NULL,   dist = getOption(\"getdata.dist\"),   diag_ratio = getOption(\"getdata.diag_ratio\"),   unit = getOption(\"getdata.unit\", default = \"meter\"),   asp = getOption(\"getdata.asp\"),   data = NULL,   package = getOption(\"getdata.data_package\"),   filetype = getOption(\"getdata.data_filetype\", default = \"gpkg\"),   fn = NULL,   crop = TRUE,   trim = FALSE,   from_crs = getOption(\"getdata.from_crs\"),   crs = getOption(\"getdata.crs\", 3857),   class = \"sf\",   label = NULL,   index = NULL,   col = NULL,   var_names = NULL,   clean_names = FALSE,   ... )  map_location_data(   location = NULL,   dist = NULL,   diag_ratio = NULL,   unit = NULL,   asp = NULL,   data = NULL,   package = NULL,   filetype = \"gpkg\",   fn = NULL,   crop = TRUE,   trim = FALSE,   from_crs = NULL,   crs = NULL,   class = \"list\",   label = NULL,   load = FALSE,   index = NULL,   ... )"},{"path":"https://elipousson.github.io/getdata/reference/get_location_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data for a location — get_location_data","text":"location sf object. multiple areas provided, unioned single sf object using sf::st_union dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Distance units converted units matching GDAL units x; defaults \"meter\" asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp() returns value without modification. data Character string (e.g. url, file path, name data package), sf, sfc, bbox  object including data area. package Name package search data. filetype File type use passing parameters sfext::read_sf_download sfext::read_sf_pkg (required extdata cached data). fn Function apply data filtering location returning function. crop TRUE, x cropped y using sf::st_crop(). trim TRUE, x trimmed y st_trim(). from_crs Coordinate reference system used match location CRS source data. crs Coordinate reference system return. class Class object return. label label optionally used map_location_data name data objects list returned function. index list possible location, data, (optionally) package values. List must named include value named package package must NULL, set package based index. list NULL location /data character numeric values, location data assumed index values index list. index parameter supports nested lists created make_location_data_list (using default key names \"location\" \"data\"). feature fully tested may result errors unexpected results. col as_sf_list, name column used group data x sf object used group nest data passing x. var_names named list following format, list(\"New var name\" = old_var_name), two column data frame first column new variable names second column old variable names; defaults NULL. clean_names TRUE, clean names provided nm created based value col using janitor::clean_names. FALSE, use names provided. ... additional parameters passed sfext::read_sf_path, sfext::read_sf_url, sfext::read_sf_pkg sfext::st_filter_ext load TRUE class \"list\", load data local environment; defaults FALSE.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_location_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get data for a location — get_location_data","text":"function previously supported county geoid, state name, abbreviation, geoid location. Currently, recommend using get_states get_counties passing sf object location. Working sf lists data locations: map_location_data makes easier work sf lists. supports data character vector, data sf list location single object, location character vector sf list (including lists bbox sfc objects), data location lists (list created make_location_data_list).","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_open_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data from an open data portal (Socrata) for a location — get_open_data","title":"Get data from an open data portal (Socrata) for a location — get_open_data","text":"get_socrata_data get_open_data source_type set \"socrata\" (currently supported option). get_open_data can return selected dataset using Socrata Query Language (SoQL) parameters tibble sf object. Details SoQL queries found Socrata API documentation https://dev.socrata.com/docs/queries/.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_open_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data from an open data portal (Socrata) for a location — get_open_data","text":"","code":"get_open_data(   data = NULL,   source_url = NULL,   source_type = \"socrata\",   select = NULL,   where = NULL,   query = NULL,   location = NULL,   dist = NULL,   diag_ratio = NULL,   unit = NULL,   asp = NULL,   name_col = NULL,   name = NULL,   coords = c(\"longitude\", \"latitude\"),   geometry = FALSE,   token = NULL,   from_crs = 4326,   crs = NULL,   clean_names = TRUE )  get_socrata_data(   data = NULL,   source_url = NULL,   select = NULL,   where = NULL,   query = NULL,   location = NULL,   dist = NULL,   diag_ratio = NULL,   unit = NULL,   asp = NULL,   name_col = NULL,   name = NULL,   coords = c(\"longitude\", \"latitude\"),   geometry = FALSE,   token = NULL,   from_crs = 4326,   crs = NULL,   clean_names = TRUE )"},{"path":"https://elipousson.github.io/getdata/reference/get_open_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data from an open data portal (Socrata) for a location — get_open_data","text":"data data set identifier (known resource Socrata). data set \"list\" valid source_url provided, function returns list available resources. source_url data source url. Socrata, base url open data portal. source_type Data source type; defaults \"socrata\" currently supported option. select SODA $select parameter. Set columns returned, similar SELECT SQL. https://dev.socrata.com/docs/queries/select.html SODA $parameter. Filters rows returned, similar . https://dev.socrata.com/docs/queries/.html query SODA $query parameter. full SoQL query string, one parameter. https://dev.socrata.com/docs/queries/query.html location sf bbox obkect dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Distance units converted units matching GDAL units x; defaults \"meter\" asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp() returns value without modification. name_col name column Socrata data location names (e.g. County) name location name return coords Name(s) column coordinate data, Default: c(\"longitude\", \"latitude\") geometry TRUE latitude/longitude columns available, return sf() object. Default FALSE. token Access token API Key; required access data Socrata. from_crs Coordinate reference system used match location CRS source data. crs Coordinate reference system return. clean_names TRUE, pass data frame janitor::clean_names; defaults TRUE.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_open_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data from an open data portal (Socrata) for a location — get_open_data","text":"","code":"## Get Q2 2020 vehicle crash data for Cecil County, Maryland if (FALSE) {   get_open_data(     source_url = \"https://opendata.maryland.gov\",     data = \"65du-s3qu\",     where = \"(year = '2020') AND (quarter = 'Q2')\",     name_col = \"county_desc\",     name = \"Cecil\",     token = Sys.getenv(\"MARYLAND_OPEN_DATA_API_KEY\")   ) }"},{"path":"https://elipousson.github.io/getdata/reference/get_osm_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Use osmdata to get Open Street Map data for a location — get_osm_data","title":"Use osmdata to get Open Street Map data for a location — get_osm_data","text":"Use osmdata functions query OSM data adjusted bounding box enclosing ways/relations around center location.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_osm_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use osmdata to get Open Street Map data for a location — get_osm_data","text":"","code":"get_osm_data(   location = NULL,   dist = NULL,   diag_ratio = NULL,   unit = NULL,   asp = NULL,   key,   value = NULL,   features = NULL,   crs = NULL,   geometry = NULL,   osmdata = FALSE,   enclosing = NULL,   nodes_only = FALSE )  get_osm_id(id, type = NULL, crs = NULL, geometry = NULL, osmdata = FALSE)  get_osm_boundaries(   location,   level = NULL,   lang = \"en\",   crs = NULL,   enclosing = \"relation\",   geometry = NULL,   osmdata = FALSE )"},{"path":"https://elipousson.github.io/getdata/reference/get_osm_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use osmdata to get Open Street Map data for a location — get_osm_data","text":"location sf, sfc, bbox object. dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Distance units converted units matching GDAL units x; defaults \"meter\" asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp() returns value without modification. key Feature key overpass API query. value Value feature key; can negated initial exclamation mark, value = \"!\", can also vector, value = c(\"\", \"\"). value = \"\" key = \"building\" values passed osmdata package preset list extracted osmdata::available_tags(). features Character vector key-value pairs keys values enclosed escape-formatted quotations (see examples). crs Coordinate reference system output data; NULL, data remains Open Street Map coordinate reference system 4326. Default: NULL. geometry Geometry type output (\"polygons\", \"points\", \"lines\", \"multilines\", \"multipolygons\"); multiple geometry types needed set osmdata TRUE. Default NULL. osmdata TRUE return osmdata class object includes overpass API call, metadata including timestamp version numbers, available geometry types; defaults FALSE. enclosing enclosing \"relation\" \"way\", function uses osmdata::opq_enclosing() query OSM data (instead osmdata::add_osm_feature(). Defaults NULL. enclosing parameter provided, dist, diag_ratio, asp, unit parameters ignored center provided location used query. geometry set automatically based enclosing \"relation\" using \"multipolygons\" \"way\" using \"polygons\" geometry. nodes_only TRUE, query OSM nodes . OSM structures place = \"city\" highway = \"traffic_signals\" represented nodes . Queries built default return nodes, ways, relation, can inefficient node-queries. Setting value TRUE cases makes queries efficient, data returned osm_points list item. id OpenStreetMap feature id type type feature id; \"node\", \"way\", \"relation\" level administrative level (admin_level) boundary return; defaults NULL. See https://wiki.openstreetmap.org/wiki/Key:admin_level information. used get_osm_boundaries. lang Language boundary names include resulting data frame (e.g. \"en\" English \"es\" Spanish). Default language names always included results. Defaults \"en\". See https://wiki.openstreetmap.org/wiki/Multilingual_names information.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_osm_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use osmdata to get Open Street Map data for a location — get_osm_data","text":"simple feature object features using selected geometry type osmdata object features geometry types.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_state_tigris.html","id":null,"dir":"Reference","previous_headings":"","what":"Use tigris to get state-level data from the U.S. Census Bureau — get_tigris_data","title":"Use tigris to get state-level data from the U.S. Census Bureau — get_tigris_data","text":"Use tigris package download state-level data U.S. Census Bureau API filter name GeoID.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_state_tigris.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use tigris to get state-level data from the U.S. Census Bureau — get_tigris_data","text":"","code":"get_tigris_data(   type = NULL,   state = getOption(\"getdata.state\"),   name = NULL,   crs = getOption(\"getdata.crs\", default = 3857),   cb = TRUE,   clean_names = TRUE,   ... )"},{"path":"https://elipousson.github.io/getdata/reference/get_state_tigris.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use tigris to get state-level data from the U.S. Census Bureau — get_tigris_data","text":"type Type data return, Default: NULL; See details supported options. state State name, abbreviation, GeoID. Required. Defaults getOption(\"getdata.state\"). name Name matching value namelsad, namelsad, geoid columns. Default: NULL crs Coordinate reference system returned data, Default: getOption(\"getdata.crs\", default = 3857) cb cb set TRUE, download generalized (1:500k) tracts file. FALSE, download detailed TIGER/Line file. Defaults TRUE (reverse default tigris functions). parameter used type set blocks, roads, primary secondary roads, area water, linear water, landmarks, zctas. ... Additional parameters passed tigris functions.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_state_tigris.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use tigris to get state-level data from the U.S. Census Bureau — get_tigris_data","text":"simple feature object matching type provided.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_state_tigris.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use tigris to get state-level data from the U.S. Census Bureau — get_tigris_data","text":"Supported data types: Different type values corresponded different tigris functions downloading U.S. Census Bureau API include. Supported options include: \"counties\", \"census places\", \"congressional districts\", \"legislative districts\", \"senate district\", \"tracts\", \"block groups\", \"blocks\", \"pumas\", \"voting districts\", \"zctas\", \"roads\", \"primary secondary roads\", \"area water\",  \"linear water\", \"landmarks\". tigris functions use \"state\" parameter (e.g. tigris::coastline tigris::rails)  supported function. Note default value cb parameter get_tigris_data TRUE default value original tigris package FALSE.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_static_mapbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Use mapboxapi to get a static Mapbox map image — get_static_mapbox","title":"Use mapboxapi to get a static Mapbox map image — get_static_mapbox","text":"Wrapper function mapboxapi::static_mapbox(), get_location(), get_osm_data(), get_osm_id(), get_osm_boundaries() functions.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_static_mapbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use mapboxapi to get a static Mapbox map image — get_static_mapbox","text":"","code":"get_static_mapbox(   location,   dist = NULL,   unit = \"meter\",   overlay_location = TRUE,   style_url = \"mapbox://styles/mapbox/light-v10\",   overlay_sf = NULL,   overlay_style = NULL,   zoom = NULL,   width = 600,   height = 400,   bearing = NULL,   pitch = NULL,   ... )  get_osm_static_mapbox(   id = NULL,   key = NULL,   level = NULL,   location = NULL,   dist = NULL,   unit = \"meter\",   overlay_location = TRUE,   style_url = \"mapbox://styles/mapbox/light-v10\",   overlay_sf = NULL,   overlay_style = NULL,   zoom = NULL,   width = 600,   height = 400,   bearing = NULL,   pitch = NULL,   ... )  get_location_static_mapbox(   type,   dist = NULL,   unit = \"meter\",   name = NULL,   name_col = \"name\",   id = NULL,   id_col = \"id\",   location = NULL,   index = NULL,   union = FALSE,   overlay_location = TRUE,   style_url = \"mapbox://styles/mapbox/light-v10\",   overlay_sf = NULL,   overlay_style = NULL,   zoom = NULL,   width = 600,   height = 400,   bearing = NULL,   pitch = NULL,   ... )"},{"path":"https://elipousson.github.io/getdata/reference/get_static_mapbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use mapboxapi to get a static Mapbox map image — get_static_mapbox","text":"location input location like request tiles. Can length-4 vector representing bounding box, sf object. input sf object supplied, use buffer_dist argument control much area want capture around layer. input sf object can arbitrary coordinate reference system, length-4 bounding box vector supplied instead must represent WGS84 longitude/latitude coordinates order c(xmin, ymin, xmax, ymax). dist Buffer distance passed buffer_dist parameter mapboxapi::static_mapbox(). unit Unit dist argument. dist converted unit meters mapboxapi::static_mapbox(). overlay_location TRUE, use location (OpenStreetMap feature) overlay_sf parameter. style_url Style URL; defaults \"mapbox://styles/mapbox/light-v10\" overlay_sf overlay sf object (optional). function convert sf object GeoJSON plot basemap style. Spatial data large trigger error, added style Mapbox Studio instead. overlay_style named list vectors specifying style sf overlay. Possible names \"stroke\", \"stroke-width\" (\"stroke_width\"), \"stroke-opacity\" (\"stroke_opacity\"), \"fill\", \"fill-opacity\" (\"fill_opacity\"). fill stroke color values can specified six-digit hex codes color names, opacity width values supplied floating-point numbers. overlay_style NULL, style values can pulled columns names overlay_sf. zoom map zoom. map infer overlay unless longitude, latitude, zoom specified. width, height Map width height; defaults 600 px width 400 px height. pitch, bearing map pitch bearing; defaults NULL. pitch can range 0 60, bearing -360 360. ... Additional parameters passed get_location_data type character index NULL. id OpenStreetMap feature id key Feature key overpass API query. level administrative level (admin_level) boundary return; defaults NULL. See https://wiki.openstreetmap.org/wiki/Key:admin_level information. used get_osm_boundaries. type get_osm_static_mapbox, type feature id; (\"node\", \"way\", \"relation\"); get_location_static_mapbox, type location (see get_location() details. name Location name return. name_col Column name type name values, Default: 'name' Required name provided. id_col Column name type id values, Default: 'id'. Required id provided. index Optional list used match type data, Default: NULL union TRUE, location geometry unioned sf::st_union names combined single value. Default: FALSE.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_static_mapbox.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use mapboxapi to get a static Mapbox map image — get_static_mapbox","text":"get_osm_static_mapbox, ... parameters passed get_osm_data(), get_osm_id(), get_osm_boundaries() functions.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_static_mapbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use mapboxapi to get a static Mapbox map image — get_static_mapbox","text":"","code":"if (FALSE) {   get_osm_static_mapbox(     id = \"way/49664223\",     dist = 0.5,     unit = \"mi\",     overlay_style = list(       stroke = \"darkgreen\",       fill = \"green\",       fill_opacity = 0.25     )   )    nc <- read_sf_path(system.file(\"shape/nc.shp\", package = \"sf\"))    get_location_static_mapbox(     type = nc,     name = \"Ashe\",     name_col = \"NAME\",     dist = 50,     unit = \"mi\"   ) }"},{"path":"https://elipousson.github.io/getdata/reference/get_wiki_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Wikipedia articles for a location — get_wiki_data","title":"Get Wikipedia articles for a location — get_wiki_data","text":"Use Wikipedia API geosearch API get Wikipedia articles location. See https://www.mediawiki.org/wiki/Extension:GeoData information. returns Wikipedia articles coordinates.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_wiki_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Wikipedia articles for a location — get_wiki_data","text":"","code":"get_wiki_data(   location,   radius = FALSE,   primary = NULL,   details = NULL,   limit = 50,   list = \"geosearch\",   lang = getOption(\"getdata.lang\", default = \"en\"),   geometry = TRUE,   dist = getOption(\"getdata.dist\"),   diag_ratio = getOption(\"getdata.diag_ratio\"),   unit = getOption(\"getdata.unit\", \"meter\"),   asp = getOption(\"getdata.asp\"),   crs = getOption(\"getdata.unit\", 3857),   remove_coords = TRUE,   clean_names = TRUE )"},{"path":"https://elipousson.github.io/getdata/reference/get_wiki_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Wikipedia articles for a location — get_wiki_data","text":"location sf object. multiple areas provided, unioned single sf object using sf::st_union radius TRUE, use dist buffer around center location; defaults FALSE primary NULL, search primary coordinates. Set primary \"\" \"secondary\" search coordinate types. details Additional detailed return results. Options include \"type\", \"name\", \"country\", \"region\"; defaults NULL. limit Number pages return (max 500); defaults 50 list method use query; \"geosearch\" returns data, \"resp\" returns response lang Language search Wikipedia; defaults \"en\". geometry TRUE, return sf object. FALSE, return data frame. Defaults FALSE. dist buffer distance units. Optional. diag_ratio ratio diagonal distance area's bounding box used buffer distance. e.g. diagonal distance 3000 meters \"diag_ratio = 0.1\"  300 meter used. Ignored dist provided. unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Distance units converted units matching GDAL units x; defaults \"meter\" asp Aspect ratio width height numeric value (e.g. 0.33) character (e.g. \"1:3\"). numeric, get_asp() returns value without modification. crs Coordinate reference system bounding box return remove_coords df_to_sf, TRUE, remove coordinate columns converting data frame simple feature object; defaults FALSE. clean_names TRUE, clean names provided nm created based value col using janitor::clean_names. FALSE, use names provided.","code":""},{"path":"https://elipousson.github.io/getdata/reference/get_wiki_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Wikipedia articles for a location — get_wiki_data","text":"function, location can either sf, sfc, bbox object title Wikipedia article related location.","code":""},{"path":"https://elipousson.github.io/getdata/reference/getdata-package.html","id":null,"dir":"Reference","previous_headings":"","what":"getdata: Get Easy Access to Tabular and Spatial Data — getdata-package","title":"getdata: Get Easy Access to Tabular and Spatial Data — getdata-package","text":"Download format spatial non-spatial data simple filtering location.","code":""},{"path":[]},{"path":"https://elipousson.github.io/getdata/reference/getdata-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"getdata: Get Easy Access to Tabular and Spatial Data — getdata-package","text":"Maintainer: Eli Pousson eli.pousson@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://elipousson.github.io/getdata/reference/make_location_data_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a list of data and corresponding locations — make_location_data_list","title":"Make a list of data and corresponding locations — make_location_data_list","text":"function converts data location lists sf objects using as_sf_list. location_col, data_col, col (sets value), provided col passed as_sf_list allow creation sf list sf data frame using dplyr::group_nest().","code":""},{"path":"https://elipousson.github.io/getdata/reference/make_location_data_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a list of data and corresponding locations — make_location_data_list","text":"","code":"make_location_data_list(   data = NULL,   location = NULL,   key = c(\"location\", \"data\"),   ... )"},{"path":"https://elipousson.github.io/getdata/reference/make_location_data_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a list of data and corresponding locations — make_location_data_list","text":"data, location sf object list sf objects data corresponding locations. key Names location data returned list. ... Pass location_col /data_col group nest data provided location data. Use col set value.","code":""},{"path":"https://elipousson.github.io/getdata/reference/make_location_data_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a list of data and corresponding locations — make_location_data_list","text":"location data length length, combined single list. either one length 1 , length 1 object repeated match length longer object. Different length objects neither length 1 gives warning.","code":""},{"path":"https://elipousson.github.io/getdata/reference/make_location_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a grid over the bounding box of a location — make_location_grid","title":"Make a grid over the bounding box of a location — make_location_grid","text":"location single feature sf object, original columns object included output grid. location mutiple features, values name_col combined sfext::st_union_ext columns dropped. input sf object columns named id, rows, cols.","code":""},{"path":"https://elipousson.github.io/getdata/reference/make_location_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a grid over the bounding box of a location — make_location_grid","text":"","code":"make_location_grid(location, name_col = \"name\", unit = NULL, ...)"},{"path":"https://elipousson.github.io/getdata/reference/make_location_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a grid over the bounding box of a location — make_location_grid","text":"location sf, sfc, bbox object passed sfext::st_make_grid_ext name_col Column name collapse new name_col value, Default: 'name' unit Units buffer. Supported options include \"meter\", \"foot\", \"kilometer\", \"mile\", \"nautical mile\" Common abbreviations (e.g. \"km\" instead \"kilometer\") also supported. Distance units converted units matching GDAL units x; defaults \"meter\" ... Arguments passed sfext::st_make_grid_ext x sf, sfc, bbox object, Default: NULL. Required. crs Coordinate reference system bounding box return ncol,nrow Used set n either NULL; defaults NULL. row id added columns grid provided. n n NULL square TRUE, grid set automatically 10 cells wide, Default: NULL gutter Distance units column cell; gutter effectively serves margin negative buffer applied cells (including edges grid). desc TRUE, reverse standard order cell id numbering; defaults FALSE cellsize target cellsize \"polygons\", \"corners\", \"centers\"; set centers automatically style \"circle\", \"circle_offset\" buffer applied return circular polygons. style Style cell return options including \"rect\", \"square\", \"hex\", \"flat_top_hex\", \"circle\", \"circle_offset\" .id name use cell id column. Defaults \"id\". filter TRUE (trim TRUE) filter grid geometry x using st_filter_ext trim TRUE, x trimmed y st_trim().","code":""},{"path":"https://elipousson.github.io/getdata/reference/osm_building_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"OpenStreetMap building tags — osm_building_tags","title":"OpenStreetMap building tags — osm_building_tags","text":"Used get_osm_data key = \"building\".","code":""},{"path":"https://elipousson.github.io/getdata/reference/osm_building_tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OpenStreetMap building tags — osm_building_tags","text":"","code":"osm_building_tags"},{"path":"https://elipousson.github.io/getdata/reference/osm_building_tags.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"OpenStreetMap building tags — osm_building_tags","text":"character vector length 84","code":""},{"path":"https://elipousson.github.io/getdata/reference/osm_building_tags.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"OpenStreetMap building tags — osm_building_tags","text":"information building key https://wiki.openstreetmap.org/wiki/Key:building","code":""},{"path":"https://elipousson.github.io/getdata/reference/set_access_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Set or get an access token or API key to/from environment variables. — set_access_token","title":"Set or get an access token or API key to/from environment variables. — set_access_token","text":"Based mapboxapi::mb_access_token function mapboxapi package Kyle Walker.","code":""},{"path":"https://elipousson.github.io/getdata/reference/set_access_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set or get an access token or API key to/from environment variables. — set_access_token","text":"","code":"set_access_token(token, overwrite = FALSE, install = FALSE, type = NULL)  get_access_token(token = NULL, type = NULL)"},{"path":"https://elipousson.github.io/getdata/reference/set_access_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set or get an access token or API key to/from environment variables. — set_access_token","text":"token access token API key; required set_access_token(). token provided; type required get_access_token(). overwrite TRUE, overwrite existing token; Default: FALSE install TRUE, install token use future sessions; Default: FALSE type Name token; defaults NULL.","code":""},{"path":"https://elipousson.github.io/getdata/reference/us_counties.html","id":null,"dir":"Reference","previous_headings":"","what":"U.S. County boundaries (1:5 mi scale, bbox and wkt) — us_counties","title":"U.S. County boundaries (1:5 mi scale, bbox and wkt) — us_counties","text":"U.S. County boundaries data downloaded tigris::counties.","code":""},{"path":"https://elipousson.github.io/getdata/reference/us_counties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"U.S. County boundaries (1:5 mi scale, bbox and wkt) — us_counties","text":"","code":"us_counties"},{"path":"https://elipousson.github.io/getdata/reference/us_counties.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"U.S. County boundaries (1:5 mi scale, bbox and wkt) — us_counties","text":"data frame 3,220 rows 7 variables: name County name (tidycensus) name_short County name without state (tigris) geoid County GeoID (labelled) abb_state State abbreviation (USPS) est_pop Estimated county population (B01001_001), American Community Survey 5 year, 2015-2019 countyfp County FIPS statefp State FIPS bbox Bounding box wkt Well known text (labelled)","code":""},{"path":"https://elipousson.github.io/getdata/reference/us_counties.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"U.S. County boundaries (1:5 mi scale, bbox and wkt) — us_counties","text":"geoid wkt columns labelled combination abbreviated county name state abbreviation snake case. Population estimates (est_pop) included county equivalents U.S. Virgin Islands, Guam, Northern Mariana Islands, American Samoa.","code":""},{"path":"https://elipousson.github.io/getdata/reference/us_states.html","id":null,"dir":"Reference","previous_headings":"","what":"U.S. State boundaries (1:5 mi scale, bbox and wkt) — us_states","title":"U.S. State boundaries (1:5 mi scale, bbox and wkt) — us_states","text":"U.S. State boundaries data downloaded tigris::states.","code":""},{"path":"https://elipousson.github.io/getdata/reference/us_states.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"U.S. State boundaries (1:5 mi scale, bbox and wkt) — us_states","text":"","code":"us_states"},{"path":"https://elipousson.github.io/getdata/reference/us_states.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"U.S. State boundaries (1:5 mi scale, bbox and wkt) — us_states","text":"data frame 52 rows 6 variables: name State name geoid State GeoID (labelled) abb State abbreviation (USPS) est_pop Estimated state population (B01001_001), American Community Survey 5 year, 2015-2019 statefp State FIPS bbox Bounding box wkt Well known text (labelled)","code":""},{"path":"https://elipousson.github.io/getdata/reference/us_states.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"U.S. State boundaries (1:5 mi scale, bbox and wkt) — us_states","text":"geoid wkt columns labelled state abbreviation (abb) lower case.","code":""}]
