% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_airtable_data.R
\name{get_airtable_data}
\alias{get_airtable_data}
\alias{get_airtable_metadata}
\title{Get data from an Airtable base and optionally convert to a sf object}
\usage{
get_airtable_data(
  base,
  table = NULL,
  view = NULL,
  record = deprecated(),
  fields = NULL,
  filter = NULL,
  sort = NULL,
  direction = "asc",
  desc = deprecated(),
  max_records = 100,
  per_page = NULL,
  cell_format = "json",
  tz = NULL,
  locale = NULL,
  fields_by_id = FALSE,
  offset = NULL,
  geometry = FALSE,
  location = NULL,
  dist = getOption("getdata.dist"),
  diag_ratio = getOption("getdata.diag_ratio"),
  unit = getOption("getdata.unit", "meter"),
  asp = getOption("getdata.asp"),
  crs = getOption("getdata.crs", 3857),
  coords = getOption("getdata.coords", c("lon", "lat")),
  from_crs = getOption("getdata.from_crs", 4326),
  remove_coords = TRUE,
  address = getOption("getdata.address", "address"),
  geo = FALSE,
  name_repair = janitor::make_clean_names,
  token = NULL,
  type = "AIRTABLE_TOKEN",
  resp_type = deprecated(),
  ...
)

get_airtable_metadata(
  base,
  table = NULL,
  token = NULL,
  type = "AIRTABLE_TOKEN",
  resp_type = "tables",
  fields = FALSE
)
}
\arguments{
\item{base}{Airtable base id starting with with "app". Optional if url or
airtable are supplied. If base is an Airtable url, the table and view are
replaced based on the values parsed from the url. Required.}

\item{table}{Airtable table id or name. If table is a table ID it is a string
starting with "viw". Optional only if base is a url.}

\item{view}{Airtable view ID. View ID values starts with "viw". Optional if
require_view is \code{FALSE}.}

\item{record}{Airtable record identifier, Default: \code{NULL} Superseded by
\code{\link[rairtable:read_airtable]{rairtable::list_records()}} function.}

\item{fields}{For \code{\link[=get_airtable_metadata]{get_airtable_metadata()}}, if \code{TRUE}, return the fields
column from the data.frame with the Airtable response. If only one table is
provided, fields are returned as a data frame. Ignored if table is \code{NULL}}

\item{filter}{Placeholder for filterByFormula API parameter allowing use of
SQL style queries to filter data. Not yet implemented.}

\item{sort}{Field names to sort by. Defaults to \code{NULL}.}

\item{direction}{A string ("asc" for ascending (default) or "desc" for
descending) or character vector matching length of sort parameter. Ignored
if sort is \code{NULL}.}

\item{desc}{Deprecated. Sort results in descending order. Replaced by
direction parameter.}

\item{max_records}{Maximum number of records to return. Must be 100 or less.}

\item{per_page}{Passed to page_size parameter of
\code{\link[rairtable:read_airtable]{rairtable::list_records()}}}

\item{cell_format}{Cell format for "Link to another record" fields. Defaults
to "json" which returns a unique record ID. A "string" cell_format returns
the displayed character string.}

\item{tz, locale}{Time zone and locale, Defaults to \code{NULL}. If cell_format is
"string", tz defaults to \code{Sys.timezone()} and locale defaults to
\code{Sys.getlocale("LC_TIME")}.}

\item{fields_by_id}{If \code{TRUE}, use fields IDs for column names in returned
records. If \code{FALSE} (default), use field names.}

\item{offset}{Offset parameter, Default: \code{NULL}}

\item{geometry}{If \code{TRUE}, convert data into a simple feature object.
Defaults to \code{FALSE}.}

\item{location}{sf object. If multiple areas are provided, they are unioned
into a single sf object using \code{\link[sf:geos_combine]{sf::st_union()}}}

\item{dist}{buffer distance in units. Optional.}

\item{diag_ratio}{ratio of diagonal distance of area's bounding box used as
buffer distance. e.g. if the diagonal distance is 3000 meters and the
"diag_ratio = 0.1"  a 300 meter will be used. Ignored when \code{dist} is
provided.}

\item{unit}{Units for buffer. Supported options include "meter", "foot",
"kilometer", and "mile", "nautical mile" Common abbreviations (e.g. "km"
instead of "kilometer") are also supported. Distance in units is converted
to units matching GDAL units for x; defaults to "meter"}

\item{asp}{Aspect ratio of width to height as a numeric value (e.g. 0.33) or
character (e.g. "1:3"). If numeric, \code{\link[sfext:get_asp]{get_asp()}} returns the same value
without modification.}

\item{crs}{Cordinate reference system to return, Default: 4326 for
\code{\link[sfext:sf_to_df]{sf_to_df()}} and \code{NULL} for \code{\link[sfext:df_to_sf]{df_to_sf()}}.}

\item{coords}{Coordinate columns for input data.frame or output sf object (if
geometry is 'centroid' or 'point') Default: c("lon", "lat").}

\item{from_crs}{For \code{\link[sfext:df_to_sf]{df_to_sf()}}, coordinate reference system used by
coordinates or well known text in data frame.}

\item{remove_coords}{For \code{\link[sfext:df_to_sf]{df_to_sf()}}, if \code{TRUE}, remove the coordinate columns
after converting a data frame to simple feature object; defaults to
\code{FALSE}.}

\item{address}{Address column name passed to \code{\link[tidygeocoder:geocode]{tidygeocoder::geocode()}} or
\link[tidygeocoder:geo]{tidygeocoder::geo}}

\item{geo}{If \code{TRUE}, use \code{\link[sfext:address_to_sf]{address_to_sf()}} to geocode address column; defaults
to \code{FALSE}.}

\item{name_repair}{One of "unique" (default), "universal", "check_unique",
"unique_quiet", or "universal_quiet" passed to \code{\link[vctrs:vec_bind]{vctrs::vec_cbind()}}. See
\code{\link[=vctrs:vec_as_names]{vctrs:vec_as_names()}} for the meaning of these options.}

\item{token, type}{API token and type, token defaults to \code{NULL} and type to
\code{"AIRTABLE_TOKEN"} (same as \code{get_access_token(type = "AIRTABLE_TOKEN")}).}

\item{resp_type}{Response type to return, Reprecated. Previously, set resp_type
to "resp" to return the API response without any additional formatting or
conversion.}

\item{...}{
  Arguments passed on to \code{\link[rairtable:read_airtable]{rairtable::list_records}}
  \describe{
    \item{\code{airtable}}{An \code{airtable} class object. Optional for \code{\link[rairtable:read_airtable]{read_airtable()}} if
url is supplied. For \code{\link[rairtable:list_records]{list_records()}} and
\code{\link[rairtable:get_record]{get_record()}}, support the airtable, url, or a base \emph{and} table
parameter.}
    \item{\code{airtable_id_col}}{Airtable record ID column name assigned to returned
data frame. Defaults to \code{NULL} which is sets record ID column name to
\code{getOption("rairtable.id_col", "airtable_record_id")}. For \code{\link[rairtable:list_records]{list_records()}}
and \code{\link[rairtable:get_record]{get_record()}}, airtable_id_col is not used if metadata is \code{NULL} or
does not include "id". The record ID column is dropped and converted to
rownames if id_to_col is \code{FALSE}.}
    \item{\code{model}}{Optional. A table model from \code{\link[rairtable:get_table_model]{get_table_model()}}. If supplied,
model is used to validate fields and sort parameters and to arrange columns
to match the order of the table model.}
    \item{\code{.name_repair}}{One of "unique" (default), "universal", "check_unique",
"unique_quiet", or "universal_quiet" passed to \code{\link[vctrs:vec_bind]{vctrs::vec_cbind()}}. See
\code{\link[=vctrs:vec_as_names]{vctrs:vec_as_names()}} for the meaning of these options.}
    \item{\code{tz,locale}}{Time zone and locale, Defaults to \code{NULL}. If cell_format is
"string", tz defaults to \code{Sys.timezone()} and locale defaults to
\code{Sys.getlocale("LC_TIME")}.}
    \item{\code{page_size}}{Maximum number of records to return per page.}
    \item{\code{metadata}}{Record metadata columns to include with returned data frame.
Options including "id", "createdTime", and "commentCount". Defaults to
\code{c("id", "createdTime")}. If metadata is \code{NULL}, no additional fields are
added to the returned data frame.}
    \item{\code{simplifyVector}}{Passed to \code{\link[httr2:req_body]{httr2::req_body_json()}}. If \code{FALSE},
\code{\link[rairtable:get_record]{get_record()}} and \code{\link[rairtable:list_records]{list_records()}} both return named lists of records.}
  }}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
Get data from an Airtable base using the Airtable API, a development version
of the \href{https://github.com/elipousson/rairtable/tree/dev}{rairtable package},
and the httr2 package. If the base includes coordinate fields/columns,
optionally convert the data to a simple feature object using
\code{\link[sfext:sf_to_df]{sfext::df_to_sf()}} if \code{geometry = TRUE}.
}
\details{
This function an Airtable personal access token which you can create at
\url{https://airtable.com/create/tokens} and save to your local environment with
\verb{set_access_token(token = <YOUR_PERSONAL_ACCESS_TOKEN>, type = "AIRTABLE_TOKEN")}. The function previously required an Airtable API key
which you can set using \verb{set_access_token(token = <YOUR_API_KEY>, type = "AIRTABLE_API_KEY")}. However, Airtable is in the process of deprecating user
API keys.

\code{\link[=get_airtable_data]{get_airtable_data()}} requires a scope that includes \code{data.records:read} and
\code{\link[=get_airtable_metadata]{get_airtable_metadata()}} a scope including \code{schema.bases:read}.

As of May 2023, this function depends on the dev branch of my fork of the
rairtable package. I expect this dependency to switch back to the rairtable
package when the fork is merged.

Learn more about the Airtable API
\url{https://airtable.com/developers/web/api/introduction}
}
