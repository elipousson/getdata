% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_location.R
\name{get_location}
\alias{get_location}
\alias{get_location_type}
\title{Get location of a specified type based on name, id, or location}
\usage{
get_location(
  type,
  name = NULL,
  name_col = "name",
  id = NULL,
  id_col = "id",
  location = NULL,
  index = NULL,
  union = FALSE,
  crs = getOption("getdata.crs", 3857),
  label = NULL,
  class = "sf",
  ...
)
}
\arguments{
\item{type}{Type of location to return. Type can be an sf object, e.g. a data
frame with multiple neighborhoods or a character string that can be passed
to \code{\link[=get_location_data]{get_location_data()}}. If index is provided, character can also be a
character string to match the name of a list.}

\item{name}{Location name to return.}

\item{name_col}{Column name in type with name values, Default: 'name'
Required if name provided.}

\item{id}{Location id to return. id is coerced to character or numeric to
match the class of the id_col for type.}

\item{id_col}{Column name in type with id values, Default: 'id'. Required if
id is provided.}

\item{location}{An address, bounding box (\code{bbox}), or simple feature (\code{sf})
object passed to \code{\link[sf:st_join]{sf::st_filter()}}. Any valid address or addresses are
geocoded with \code{\link[tidygeocoder:geo]{tidygeocoder::geo()}}, converted to a simple feature object,
and then used as a spatial filter. \code{bbox} objects are converted using
\code{\link[sfext:sf_bbox_misc]{sfext::sf_bbox_to_sf()}}. Multiple addresses are supported.}

\item{index}{Optional list used to match type to data, Default: \code{NULL}}

\item{union}{If \code{TRUE}, the location geometry is unioned with
\code{\link[sf:geos_combine]{sf::st_union()}} and the names are combined into a single value. Default:
\code{FALSE}.}

\item{crs}{Coordinate reference system to return; defaults to \code{NULL} which
returns data using the same coordinate reference system as the provided
type of location.}

\item{label}{Label optionally added to "label" column; must be a length 1 or
match the number of rows returned based on the other parameters. If \code{union = TRUE}, using label is recommended. Default: \code{NULL}}

\item{class}{Class of object to return; defaults to "sf".}

\item{...}{Additional parameters passed to \code{\link[=get_location_data]{get_location_data()}} if type is
character and index is \code{NULL}.}
}
\value{
A simple feature object from data provided to type.
}
\description{
Filter by name or id or use a spatial filter based on an sf object or
geocoded street address. Optionally you can use an index list to match the
type to a named list of URLs or sf objects.
}
\examples{
nc <- sfext::read_sf_path(system.file("shape/nc.shp", package = "sf"))

# get_location works with a type sf object and name and id values
get_location(type = nc, name = "Warren", name_col = "NAME")
get_location(type = nc, id = 37185, id_col = "FIPSNO")
# if name is named, the name of name is used as name_col
get_location(type = nc, name = c("NAME" = "Warren"))

# type can also be a file path
get_location(
  type = system.file("shape/nc.shp", package = "sf"),
  name = "Hertford",
  name_col = "NAME"
)

# type can also be an index name (if a named list of data sets, url values, or
# path values is passed to index)
get_location(
  type = "smaller",
  name = "Hertford",
  name_col = "NAME",
  index = list(
    "smaller" = dplyr::filter(nc, AREA <= 0.10),
    "larger" = dplyr::filter(nc, AREA > 0.15)
  )
)
}
