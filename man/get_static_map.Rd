% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_static_map.R
\name{get_static_map}
\alias{get_static_map}
\alias{get_static_mapbox}
\alias{get_osm_static_mapbox}
\alias{get_location_static_mapbox}
\alias{get_static_bingmap}
\title{Use mapboxapi or bingmapr to get a static map image}
\usage{
get_static_mapbox(
  location,
  dist = NULL,
  unit = "meter",
  style_url = "mapbox://styles/mapbox/light-v10",
  overlay_location = FALSE,
  overlay_sf = NULL,
  overlay_style = NULL,
  zoom = NULL,
  width = 600,
  height = 400,
  bearing = NULL,
  pitch = NULL,
  token = NULL,
  ...
)

get_osm_static_mapbox(
  id = NULL,
  key = NULL,
  level = NULL,
  location = NULL,
  dist = NULL,
  unit = "meter",
  overlay_location = TRUE,
  style_url = "mapbox://styles/mapbox/light-v10",
  overlay_sf = NULL,
  overlay_style = NULL,
  zoom = NULL,
  width = 600,
  height = 400,
  bearing = NULL,
  pitch = NULL,
  token = NULL,
  ...
)

get_location_static_mapbox(
  type,
  dist = NULL,
  unit = "meter",
  name = NULL,
  name_col = "name",
  id = NULL,
  id_col = "id",
  location = NULL,
  index = NULL,
  union = FALSE,
  overlay_location = TRUE,
  style_url = "mapbox://styles/mapbox/light-v10",
  overlay_sf = NULL,
  overlay_style = NULL,
  zoom = NULL,
  width = 600,
  height = 400,
  bearing = NULL,
  pitch = NULL,
  token = NULL,
  ...
)

get_static_bingmap(
  location = NULL,
  dist = NULL,
  unit = "m",
  imagery = "BirdsEye",
  zoom = NULL,
  width = 600,
  height = 400,
  bearing = NULL,
  token = NULL,
  ...
)
}
\arguments{
\item{location}{An input location for which you would like to request tiles.
Can be a length-4 vector representing a bounding box, or an \code{sf} object.
If an input \code{sf} object is supplied, use the \code{buffer_dist} argument to
control how much area you want to capture around the layer.
While the input \code{sf} object can be in an arbitrary coordinate reference system,
if a length-4 bounding box vector is supplied instead it must represent
WGS84 longitude/latitude coordinates and be in the order
\code{c(xmin, ymin, xmax, ymax)}.}

\item{dist}{Buffer distance passed to buffer_dist parameter of
\code{\link[mapboxapi:static_mapbox]{mapboxapi::static_mapbox()}} or to \code{\link[sfext:st_buffer_ext]{sfext::st_buffer_ext()}} for
\code{\link[=get_static_bingmap]{get_static_bingmap()}}.}

\item{unit}{Unit of \code{dist} argument. Defaults to "meters".}

\item{style_url}{Style URL; defaults to "mapbox://styles/mapbox/light-v10"}

\item{overlay_location}{If \code{TRUE}, use the location (or OpenStreetMap
feature) as the overlay_sf parameter. Default to \code{FALSE}. Ignored if
overlay_sf is provided.}

\item{overlay_sf}{The overlay \code{sf} object (optional). The function will
convert the \code{sf} object to GeoJSON then plot over the basemap style.
Spatial data that are too large will trigger an error, and should be added
to the style in Mapbox Studio instead.}

\item{overlay_style}{A named list of vectors specifying how to style the sf
overlay. Possible names are "stroke", "stroke-width" (or "stroke_width"),
"stroke-opacity" (or "stroke_opacity"), "fill", and "fill-opacity" (or
"fill_opacity"). The fill and stroke color values can be specified as
six-digit hex codes or color names, and the opacity and width values should
be supplied as floating-point numbers. If overlay_style is \code{NULL}, the
style values can be pulled from columns with the same names in
\code{overlay_sf}.}

\item{zoom}{The map zoom. The map will infer this from the overlay unless
longitude, latitude, and zoom are all specified.}

\item{width, height}{Map width and height; defaults to 600 px width and 400 px
height.}

\item{pitch, bearing}{The map pitch and bearing; defaults to \code{NULL}. pitch can
range from 0 to 60, and bearing from -360 to 360.}

\item{token}{Optional token or API key. Recommend setting the Bing Maps API
key using \code{\link[bingmapr:bing_maps_api_key]{bingmapr::bing_maps_api_key()}} and the Mapbox access token with
\code{\link[mapboxapi:mb_access_token]{mapboxapi::mb_access_token()}}.}

\item{...}{Additional parameters passed to \code{\link[=get_location_data]{get_location_data()}} if type is
character and index is \code{NULL}.}

\item{id}{OpenStreetMap feature id with or without a type id prefix. If
multiple id values are provided, they must use a single consistent value
for geometry.}

\item{key}{Feature key for overpass API query.}

\item{level}{Numeric administrative level (admin_level) of boundary to
return; defaults to \code{NULL}. If multiple levels are provided, the any admin
levels between the min and max values of level is returned. See
\url{https://wiki.openstreetmap.org/wiki/Key:admin_level} for more information.
Only used for \code{\link[=get_osm_boundaries]{get_osm_boundaries()}}.}

\item{type}{For \code{\link[=get_osm_static_mapbox]{get_osm_static_mapbox()}}, type of feature with id; ("node",
"way", or "relation"); for \code{\link[=get_location_static_mapbox]{get_location_static_mapbox()}}, type of location
(see \code{\link[=get_location]{get_location()}} for details.}

\item{name}{Location name to return.}

\item{name_col}{Column name in type with name values, Default: 'name'
Required if name provided.}

\item{id_col}{Column name in type with id values, Default: 'id'. Required if
id is provided.}

\item{index}{Optional list used to match type to data, Default: \code{NULL}}

\item{union}{If \code{TRUE}, the location geometry is unioned with
\code{\link[sf:geos_combine]{sf::st_union()}} and the names are combined into a single value. Default:
\code{FALSE}.}

\item{imagery}{String with imagery type, Default: 'BirdsEye' Supported values
include:
\itemize{
\item Aerial: Aerial imagery.
\item AerialWithLabels: Aerial imagery with a road overlay.
\item AerialWithLabelsOnDemand: Aerial imagery with on-demand road overlay.
\item Streetside: Street-level imagery.
\item BirdsEye: Birds Eye (oblique-angle) imagery.
\item BirdsEyeWithLabels: Birds Eye (oblique-angle) imagery with a road overlay.
\item Road: Roads without additional imagery.
\item CanvasDark: A dark version of the road maps.
\item CanvasLight: A lighter version of the road maps which also has some of the
details such as hill shading disabled.
\item CanvasGray: A grayscale version of the road maps
}}
}
\description{
Get a static map image using the  \href{https://www.mapbox.com/static-maps}{Mapbox Static Maps API} using \link[mapboxapi:static_mapbox]{mapboxapi::static_mapbox} or
the \href{https://docs.microsoft.com/en-us/bingmaps/rest-services/imagery/get-a-static-map}{Bing Maps Static Map API}
using \link[bingmapr:bing_static_map]{bingmapr::get_map_image}. An API key or access token is required for
both services. Set the bingmap API token using \link[bingmapr:bing_maps_api_key]{bingmapr::bing_maps_api_key}
and the Mapbox token with \link[mapboxapi:mb_access_token]{mapboxapi::mb_access_token} or use
\code{set_access_token} with \code{type = "BING_MAPS_API_KEY"} or \code{type = "MAPBOX_PUBLIC_TOKEN"}.
}
\details{
Variations on get_static_mapbox include
\itemize{
\item \link{get_location_static_mapbox} wrapping \code{\link[=get_location]{get_location()}}
\item \link{get_osm_static_mapbox} wrapping \code{\link[=get_osm_data]{get_osm_data()}}, \code{\link[=get_osm_id]{get_osm_id()}}, and
\code{\link[=get_osm_boundaries]{get_osm_boundaries()}}
}

In those cases, the ... parameters are passed on the getdata functions rather
than the static map function.

For \code{\link[=get_static_bingmap]{get_static_bingmap()}}, parameter names are modified from
\code{\link[bingmapr:bing_static_map]{bingmapr::get_map_image()}} for consistency, so the bearing parameter passed to
orientation and token is passed to key.
}
\examples{
\dontrun{
  get_osm_static_mapbox(
    id = "way/49664223",
    dist = 0.5,
    unit = "mi",
    overlay_style = list(
      stroke = "darkgreen",
      fill = "green",
      fill_opacity = 0.25
    )
  )

  nc <- sfext::read_sf_path(system.file("shape/nc.shp", package = "sf"))

  get_location_static_mapbox(
    type = nc,
    name = "Ashe",
    name_col = "NAME",
    dist = 50,
    unit = "mi"
  )
}
}
