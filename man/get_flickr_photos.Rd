% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_flickr_photos.R
\name{get_flickr_photos}
\alias{get_flickr_photos}
\title{Use FlickrAPI to get geotagged photos for a location}
\usage{
get_flickr_photos(
  location = NULL,
  dist = NULL,
  diag_ratio = NULL,
  unit = NULL,
  asp = NULL,
  user_id = NULL,
  tags = NULL,
  license_id = "cc0",
  sort = "date-posted",
  desc = FALSE,
  img_size = "s",
  extras = c("description", "date_taken", "tags", "geo"),
  per_page = 100,
  page = 1,
  orientation = NULL,
  geometry = TRUE,
  crs = 4326,
  key = NULL
)
}
\arguments{
\item{location}{A \code{sf} or \code{bbox} object to use in creating bounding box for
getting photos from Flickr. Optional.}

\item{dist}{buffer distance in units. Optional.}

\item{diag_ratio}{ratio of diagonal distance of area's bounding box used as
buffer distance. e.g. if the diagonal distance is 3000 meters and the
"diag_ratio = 0.1"  a 300 meter will be used. Ignored when \code{dist} is
provided.}

\item{unit}{Units for buffer. Supported options include "meter", "foot",
"kilometer", and "mile", "nautical mile" Common abbreviations (e.g. "km"
instead of "kilometer") are also supported. Distance in units is converted
to units matching GDAL units for x; defaults to "meter"}

\item{asp}{Aspect ratio of width to height as a numeric value (e.g. 0.33) or
character (e.g. "1:3"). If numeric, \code{\link[sfext:get_asp]{get_asp()}} returns the same value
without modification.}

\item{user_id}{The NSID of the user with photos to search. If this parameter
is \code{NULL} passed then all public photos will be searched.}

\item{tags}{A vector of tags to search for.}

\item{license_id}{The license id for photos. For possible values, see the
Flickr API method
\href{https://www.flickr.com/services/api/flickr.photos.licenses.getInfo.html}{flickr.photos.licenses.getInfo}
or see details for more information. If license_id is provided, "license"
is added to extras.}

\item{sort}{Supported options include "date-posted","date-taken",
"interestingness", or "relevance"}

\item{desc}{If \code{TRUE} return images in descending sort order, if \code{FALSE},
return in ascending sort order. Ignored if sort is set to "relevance".}

\item{img_size}{Image size; defaults to "s" (small). Options ranging from
smallest to largest size include "sq" (square), "t", "s", "q", "m", "n",
"z", "c", "l", and "o" (original).}

\item{extras}{Defaults to "description", "date_taken", "tags", and "geo".}

\item{per_page}{Photos to return per page of search results, Default: 100.
Maximum 250 if a location is provided or 500 otherwise.}

\item{page}{Page to return. If page is greater than length 1, loop over all
pages. This may cause issues with API access if a large page range is
provided. Default: 1}

\item{orientation}{If img_size is length 1, photos are filtered to one or
more of the supported orientations ("portrait", "landscape", and "square");
defaults to \code{NULL}.}

\item{geometry}{If \code{TRUE}, include "geo" in extras and convert photos data
frame to \code{sf} object. Passed to geo parameter of \code{\link[FlickrAPI:getPhotoSearch]{FlickrAPI::get_photo_search()}}}

\item{crs}{Coordinate reference system of \code{sf} object to return if geometry
is \code{TRUE}.}

\item{key}{Flickr API key. If api_key is \code{NULL}, the
\link[FlickrAPI:getPhotoSearch]{FlickrAPI::getPhotoSearch} uses \code{\link[FlickrAPI:setFlickrAPIKey]{FlickrAPI::getFlickrAPIKey()}} to use the
environment variable "FLICKR_API_KEY" as the key. Use \code{\link[=set_access_token]{set_access_token()}}
w/ \code{type = "FLICKR_API_KEY"} or \code{\link[FlickrAPI:setFlickrAPIKey]{FlickrAPI::setFlickrAPIKey()}}}
}
\value{
A data frame with photo information or \code{sf} object with geometry
based on latitude and longitude of geocoded photos.
}
\description{
\code{\link[=get_flickr_photos]{get_flickr_photos()}} uses \code{\link[FlickrAPI:getPhotoSearch]{FlickrAPI::get_photo_search()}} to get a data
frame or sf objects with photos from a specified location or matching other
photo search parameters. Set API key using \code{\link[FlickrAPI:setFlickrAPIKey]{FlickrAPI::set_flickr_api_key()}}
or pass to the api_key parameter.
}
\details{
License id options:

license_id can be an integer from 0 to 10 or a corresponding license code
including:
\itemize{
\item "c" (All Rights Reserved),
\item "by-bc-sa" (Attribution-NonCommercial-ShareAlike),
\item "by-nc" (Attribution-NonCommercial),
\item "by-nc-nd" (Attribution-NonCommercial-NoDerivs),
\item "by" (Attribution),
\item "by-sa" (Attribution-ShareAlike),
\item "by-nd" (Attribution-NoDerivs),
\item "nkc" (No known copyright restrictions),
\item "pd-us" (United States Government Work),
\item "cc0" (Public Domain Dedication),
\item or "pd" (Public Domain Mark).
}
}
\seealso{
\code{\link[FlickrAPI:getPhotoSearch]{FlickrAPI::getPhotoSearch()}}
}
